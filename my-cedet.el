;;
;; [Customization of the Cedet]
;;
(require 'cedet)
(require 'semantic)

(global-ede-mode t)

(progn
  (global-semantic-highlight-func-mode 1)
  (global-semantic-stickyfunc-mode 1)
  )

;; To use additional features for names completion, and displaying of
;; information for tags & classes, you also need to load the
;; semantic-ia package. This could be performed with any usefule following
;; command:
(require 'semantic/ia)

;; System header files
;;
;; To normal work with system-wide libraries,
;; Semantic should has access to system include files, that contain
;; information about functions & data types, implemented by these
;; libraries.
;;
;; If you use GCC for programming in C & C++, then Semantic can
;; automatically find path, where system include files are located. To
;; do this, you need to load semantic-gcc package with following
;; command:
;;
;; what if we could use gcc...?
;; (require 'semantic-gcc)

;; You can also explicitly specify additional paths for look up of
;; include files (and these paths also could vary for specific
;; modes). To add some path to list of system include paths, you can
;; use the semantic-add-system-include command, that accepts two
;; parameters -  string with path to include files, and symbol,
;; representing name of major mode, for which this path will used. For
;; example:
(progn
  (semantic-add-system-include "c:/dev/sdk/boost_1_43_0/boost" 'c++-mode)
  (semantic-add-system-include "c:/dev/vs9/vc/include" 'c++-mode)
  )

;; [Optimization of Semantic's work]
;;
;; To optimize work with tags, you can use several techniques:
;;
;; 1)
;; limit search by declaring an EDE project, as this described below;
;;
;; 2)
;; explicitly specify a list of root directories for your projects, so
;; Semantic will use limited number of databases with syntactic
;; information;
;;
;; 3)
;; explicitly generate tags databases for often used directories
;; (/usr/include, /usr/local/include, etc.) with the
;; semanticdb-create-ebrowse-database or
;; semanticdb-create-cscope-database commands;
;;
;; 4)
;; limit search by customization of the
;; semanticdb-find-default-throttle variable for concrete modes - for
;; example, don't use information from system include files, by
;; removing system symbol from list of objects to search for c-mode:
(setq-mode-local
 c-mode
 semanticdb-find-default-throttle
 '(project unloaded system recursive)) 	;; mabye 'local' is needed?
;; Semantic extracts syntactic information when Emacs is idle. You can
;; customize the semantic-idle-scheduler-idle-time variable to specify
;; idle time (in seconds), if you don't want to use default value.

;; [Integration with imenu]
;;
;; The Semantic package can be integrated with the imenu package. This
;; enables the display of a menu with a list of functions, variables,
;; and other tags. To enable this feature you can either use
;; semantic-load-enable-code-helpers, or, you need to add following
;; code into your initialization file:
(defun my-semantic-hook ()
  (imenu-add-to-menubar "TAGS"))
(add-hook 'semantic-init-hooks 'my-semantic-hook)

;;
;; [Customization of Semanticdb]
;;

;; If you use standard procedure for loading of Cedet, then Semanticdb
;; will loaded automatically. Otherwise, you can load and enable it
;; with following commands:
(require 'semantic/db)
(global-semanticdb-minor-mode 1)
(global-semantic-idle-scheduler-mode 1)
(global-semantic-idle-summary-mode 1)
;; (global-semantic-mru-bookmark-mode 1)

;; To customize Semanticdb you need to specify some number of
;; variables, that are used to specify path, where databases will
;; stored, and some other parameters. These variables could be set via
;; semanticdb customization group.
;;
;; Besides this, Semanticdb can use databases generated by external
;; utilities - gtags from GNU Global, ctags, ebrowse & cscope. To
;; activate this you can use following code:
;;
;; if you want to enable support for gnu global
(setq joon:use-gnu-global nil)
(if joon:use-gnu-global
	(progn
	  (require 'semanticdb-global)
	  (semanticdb-enable-gnu-global-databases 'c-mode)
	  (semanticdb-enable-gnu-global-databases 'c++-mode)))

;; ;; enable ctags for some languages:
;; ;;  Unix Shell, Perl, Pascal, Tcl, Fortran, Asm
;; (semantic-load-enable-primary-exuberent-ctags-support)

;;
;; [How to customize Semantic to work with C & C++ projects]
;;

;; To proper work of Semantic with „R & C++ code is recommended to use
;; the EDE package (work with projects, etc.). For these languages,
;; EDE package defines special project type - ede-cpp-root-project,
;; that provides additional information to Semantic, that will be used
;; to analyze source code of your project.
;;
;; To define a project, you need to use following code:

;; (ede-cpp-root-project "Tsp"
;; 					  :name "TspProject"
;; 					  :file "d:/prj/wp/tsp/trunk/CMakeLists.txt"
;; 					  :include-path '("/src/common"
;; 									  "/src/framework"
;; 									  "/src/system"
;; 									  "/src/program"
;; 									  )
;; 					  ;; :system-include-path '("~/exp/include")
;; 					  :spp-table '(("isUnix" . "")
;; 								   ("BOOST_TEST_DYN_LINK" . "")))

;; ;; from old-cedet release
;; (defun semantic-load-enable-minimum-features ()
;;   "Enable the minimum number of semantic features for basic usage.
;; This includes:
;;  `semantic-idle-scheduler-mode' - Keeps a buffer's parse tree up to date.
;;  `semanticdb-minor-mode' - Stores tags when a buffer is not in memory.
;;  `semanticdb-load-ebrowse-caches' - Loads any ebrowse dbs created earlier."
;;   (interactive)
;;   (global-semantic-idle-scheduler-mode 1)
;;   (global-semanticdb-minor-mode 1)
;;   ;; @todo - Enable this
;;   ;; (semanticdb-cleanup-cache-files t)
;;   ;; Don't do the loads from semantic-load twice.
;;   (when (null semantic-load-system-cache-loaded)
;;     ;; This loads any created system databases which get linked into
;;     ;; any searches performed.
;;     (setq semantic-load-system-cache-loaded t)
;;     ;; This loads any created ebrowse databases which get linked into
;;     ;; any searches performed.
;;     (when (and (not (featurep 'xemacs))
;; 	       (boundp 'semanticdb-default-system-save-directory)
;; 	       (stringp semanticdb-default-system-save-directory)
;; 	       (file-exists-p semanticdb-default-system-save-directory))
;;       (semanticdb-load-ebrowse-caches))
;;     )
;;   )
;; (defun semantic-load-enable-code-helpers ()
;;   "Enable some semantic features that provide basic coding assistance.
;; This includes `semantic-load-enable-minimum-features' plus:
;;   `imenu' - Lists Semantic generated tags in the menubar.
;;   `semantic-idle-summary-mode' - Show a summary for the tag indicated by
;;                                  code under point.  (intellisense)
;;   `senator-minor-mode' - Semantic Navigator, and global menu for all
;;                          features Semantic.
;;   `semantic-mru-bookmark-mode' - Provides a `switch-to-buffer' like
;;                        keybinding for tag names."
;;   (interactive)
;;   (semantic-load-enable-minimum-features)
;;   (when (and (eq window-system 'x)
;; 	     (locate-library "imenu"))
;;     (add-hook 'semantic-init-hooks (lambda ()
;; 				     (condition-case nil
;; 					 (imenu-add-to-menubar
;; 					  semantic-load-imenu-string)
;; 				       (error nil)))))
;;   (global-semantic-idle-summary-mode 1)
;;   (global-semantic-mru-bookmark-mode 1)
;;   ;; Do this last.  This allows other minor modes to get loaded
;;   ;; in so they appear in the menu properly.
;;   (global-senator-minor-mode 1)
;;   )
;; (defun semantic-load-enable-gaudy-code-helpers ()
;;   "Enable semantic features that provide gaudy coding assistance.
;; This includes `semantic-load-enable-code-helpers'.
;;   `semantic-stickyfunc-mode' - Tracks current function in header-line
;;                                (when available).
;;   `semantic-decoration-mode' - Decorate tags based on various attributes.
;;   `semantic-decoration-on-includes' - Decoration style for include files.
;;   `semantic-idle-completions-mode' - Provide smart symbol completion
;;                                  automatically at idle time."
;;   (interactive)
;;   (global-semantic-decoration-mode 1)
;;   (require 'semantic-decorate-include)
;;   (when (boundp 'header-line-format)
;;     (global-semantic-stickyfunc-mode 1))
;;   (condition-case nil
;;       (global-semantic-idle-completions-mode 1)
;;     (error nil))
;;   (semantic-load-enable-code-helpers)
;;   )
;; (defun semantic-load-enable-excessive-code-helpers ()
;;   "Enable all semantic features that provide coding assistance.
;; This includes all features of `semantic-load-enable-gaudy-code-helpers' plus:
;;   `semantic-highlight-func-mode' - Highlight the current tag.
;;   `semantic-decoration-on-*-members' - Two decoration modes that
;;                     color the background of private and protected methods.
;;   `which-func-mode' - Display the current function in the mode line."
;;   (interactive)
;;   (global-semantic-highlight-func-mode 1)
;;   (semantic-load-enable-gaudy-code-helpers)
;;   (semantic-toggle-decoration-style "semantic-decoration-on-private-members" t)
;;   (semantic-toggle-decoration-style "semantic-decoration-on-protected-members" t)
;;   (if (fboundp #'which-func-mode)
;;       (add-hook 'semantic-init-hooks (lambda ()
;; 				       (which-func-mode 1))))
;;   )
;; (semantic-load-enable-excessive-code-helpers)

(provide 'my-cedet)