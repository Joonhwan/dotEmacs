;;; Compiled snippets and support files for `cmake-mode'
;;; Snippet definitions:
;;;
(yas-define-snippets 'cmake-mode
					 '(("for" "foreach(${1:item} \\${${2:array}})\n        $0\nendforeach()" "foreach" nil nil nil nil nil nil)
					   ("qt-project" "\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)\n\nPROJECT(${1:ProjectName})\n\n# Set up the environment\nFIND_PACKAGE(Qt4 REQUIRED)\n\nINCLUDE_DIRECTORIES(\\${CMAKE_CURRENT_BINARY_DIR})\n\nSET(QT_USE_QTMAIN ON)\nINCLUDE(\\${QT_USE_FILE})\n\nSET(sources\n  $0\n  )\n\nSET(moc_header\n  )\n\nSET(header\n  )\n\nSET(forms\n  )\n\nSET(resources\n  )\n\nQT4_WRAP_CPP(moc_generated \\${moc_header})\nQT4_WRAP_UI(forms_generated \\${forms})\nQT4_ADD_RESOURCES(rc_generated \\${resources})\n\nADD_EXECUTABLE(\\${PROJECT_NAME} WIN32 MACOSX_BUNDLE\n  \\${sources}\n  \\${header}\n  \\${moc_header}\n  \\${form}\n  \\${resource}\n  \\${moc_generated}\n  \\${forms_generated}\n  \\${rc_generated}\n  )\n\nTARGET_LINK_LIBRARIES(\\${PROJECT_NAME}\n  \\${QT_LIBRARIES}\n  )\n" "qt-project cmake template ..." nil nil nil nil nil nil)
					   ("wiz" "cmake_minimum_required(VERSION 2.8 FATAL_ERROR)\n\nproject(${1:ProjectName})\n\n# Set up the environment\nfind_package(Qt4 REQUIRED)\n\ninclude_directories(\\${CMAKE_CURRENT_BINARY_DIR})\n\nset(QT_USE_QTMAIN ON)\ninclude(\\${QT_USE_FILE})\n\nset(sources\n  $0\n  )\n\nset(moc_header\n  )\n\nset(header\n  )\n\nset(forms\n  )\n\nset(resources\n  )\n\nqt4_wrap_cpp(moc_generated \\${moc_header})\nqt4_wrap_ui(forms_generated \\${forms})\nqt4_add_resources(rc_generated \\${resources})\n\nadd_executable(\\${PROJECT_NAME} WIN32 MACOSX_BUNDLE\n  \\${sources}\n  \\${header}\n  \\${moc_header}\n  \\${form}\n  \\${resource}\n  \\${moc_generated}\n  \\${forms_generated}\n  \\${rc_generated}\n  )\n\ntarget_link_libraries(\\${PROJECT_NAME}\n  \\${QT_LIBRARIES}\n  )\n" "single program project - using qt" nil nil nil nil nil nil)
					   ("wiz" "\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8 FATAL_ERROR)\n\nPROJECT(${1:ProjectName})\n\n# Set up the environment\nFIND_PACKAGE(Qt4 REQUIRED)\n\nINCLUDE_DIRECTORIES(\\${CMAKE_CURRENT_BINARY_DIR})\n\nSET(QT_USE_QTMAIN ON)\nINCLUDE(\\${QT_USE_FILE})\n" "qt blank top cmakelist" nil nil nil nil nil nil)
					   ("wiz" "set(CURR_PRJ ${1:ProjectName})\n\ninclude_directories(\n  \\${CMAKE_CURRENT_BINARY_DIR}\n  )\n\nset(\\${CURR_PRJ}_source\n  $0\n  )\n\nset(\\${CURR_PRJ}_moc_header\n  )\n\nset(\\${CURR_PRJ}_header\n  )\n\nset(\\${CURR_PRJ}_form\n  )\n\nset(\\${CURR_PRJ}_resource\n  )\n\nqt4_wrap_cpp(\\${CURR_PRJ}_moc_generated \\${\\${CURR_PRJ}_moc_header})\nqt4_wrap_ui(\\${CURR_PRJ}_forms_generated \\${\\${CURR_PRJ}_form})\nqt4_add_resources(\\${CURR_PRJ}_rc_generated \\${\\${CURR_PRJ}_resource})\n\nadd_library(\\${CURR_PRJ}\n  \\${\\${CURR_PRJ}_source}\n  \\${\\${CURR_PRJ}_header}\n  \\${\\${CURR_PRJ}_moc_header}\n  \\${\\${CURR_PRJ}_form}\n  \\${\\${CURR_PRJ}_resource}\n  \\${\\${CURR_PRJ}_moc_generated}\n  \\${\\${CURR_PRJ}_form_generated}\n  \\${\\${CURR_PRJ}_rc_generated}\n  )\n\ntarget_link_libraries(\\${CURR_PRJ}\n  \\${QT_LIBRARIES}\n  )\n" "static lib - using qt" nil nil nil nil nil nil)
					   ("wiz" "\nPROJECT(${1:ProjectName})\n\nINCLUDE_DIRECTORIES(\\${CMAKE_CURRENT_BINARY_DIR})\n\nSET(QT_USE_QTMAIN ON)\nINCLUDE(\\${QT_USE_FILE})\n\nSET(sources\n  $0\n  )\n\nSET(header\n  )\n\n\nADD_LIBRARY(\\${PROJECT_NAME}\n  \\${sources}\n  \\${header}\n  )\n" "static lib" nil nil nil nil nil nil)
					   ("wiz" "\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n\nPROJECT(${1:ProjectName})\n\n# \n# MFC configuration\n# \nADD_DEFINITIONS(-D_AFXDLL)\nADD_DEFINITIONS(-DUNICODE -D_UNICODE)\nSET(CMAKE_MFC_FLAG 2)\n# not really needed but explicitly...\nSET(MFC_LIBRARIES \n  \"debug;mfc90ud.lib;debug;msvcrtd.lib;debug;msvcprtd.lib\"\n  )\n\n# PCH support\nSET(MSVC_PCH_PREFIX \"\")\nMACRO(add_msvc_precompiled_header PrecompiledHeader PrecompiledSource SourcesVar)\n  GET_FILENAME_COMPONENT(PrecompiledBasename \\${PrecompiledHeader} NAME_WE)\n  # set(PrecompiledBinary \"\\$(IntDir)/\\$(TargetName).pch\")\n  SET(PrecompiledBinary \"\\${CMAKE_CURRENT_BINARY_DIR}/\\${CMAKE_CFG_INTDIR}/\\${PROJECT_NAME}.pch\")\n  SET(Sources \\${\\${SourcesVar}})\n  \n  SET_SOURCE_FILES_PROPERTIES(\\${PrecompiledSource}\n    PROPERTIES COMPILE_FLAGS \"/Yc\\\\\"\\${PrecompiledHeader}\\\\\" /Fp\\\\\"\\${PrecompiledBinary}\\\\\"\"\n    OBJECT_OUTPUTS \"\\${PrecompiledBinary}\")\n  SET_SOURCE_FILES_PROPERTIES(\\${Sources}\n    PROPERTIES COMPILE_FLAGS \"/Yu\\\\\"\\${PrecompiledHeader}\\\\\" /FI\\\\\"\\${PrecompiledBinary}\\\\\" /Fp\\\\\"\\${PrecompiledBinary}\\\\\"\"\n    OBJECT_DEPENDS \"\\${PrecompiledBinary}\")\n  # Add precompiled header to SourcesVar\n  LIST(APPEND \\${SourcesVar} \\${PrecompiledSource})\n  SET(MSVC_PCH_PREFIX \"\")\nENDMACRO(add_msvc_precompiled_header)\n\nADD_SUBDIRECTORY(${2:src})\n" "base script / MFC-based application" nil nil nil nil nil nil)
					   ("wiz" "\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n\nPROJECT(${1:ProjectName})\n\nset(\\${PROJECT_NAME}_CPP\n  $1App.cpp\n  $1Dlg.cpp\n  )\n\nset(\\${PROJECT_NAME}_H\n  $1App.h\n  $1Dlg.h\n  resource.h\n  stdafx.h\n  )\n\nset(\\${PROJECT_NAME}_RC\n  $1.rc\n  )\n\nADD_MSVC_PRECOMPILED_HEADER(\"stdafx.h\" \"stdafx.cpp\" \\${PROJECT_NAME}_CPP)\n\ntarget_link_libraries(\\${PROJECT_NAME}\n  \\${MFC_LIBRARIES}\n)\n" "single project / MFC dialog based application" nil nil nil nil nil nil)
					   ("wiz" "\nCMAKE_MINIMUM_REQUIRED(VERSION 2.8)\n\nPROJECT(${1:ProjectName})\n\n# \n# MFC configuration\n# \nADD_DEFINITIONS(-D_AFXDLL)\nADD_DEFINITIONS(-DUNICODE -D_UNICODE)\nSET(CMAKE_MFC_FLAG 2)\n# not really needed but explicitly...\nSET(MFC_LIBRARIES \n  \"debug;mfc90ud.lib;debug;msvcrtd.lib;debug;msvcprtd.lib\"\n  )\n\n# PCH support\nSET(MSVC_PCH_PREFIX \"\")\nMACRO(add_msvc_precompiled_header PrecompiledHeader PrecompiledSource SourcesVar)\n  GET_FILENAME_COMPONENT(PrecompiledBasename \\${PrecompiledHeader} NAME_WE)\n  # set(PrecompiledBinary \"\\$(IntDir)/\\$(TargetName).pch\")\n  SET(PrecompiledBinary \"\\${CMAKE_CURRENT_BINARY_DIR}/\\${CMAKE_CFG_INTDIR}/\\${PROJECT_NAME}.pch\")\n  SET(Sources \\${\\${SourcesVar}})\n  \n  SET_SOURCE_FILES_PROPERTIES(\\${PrecompiledSource}\n    PROPERTIES COMPILE_FLAGS \"/Yc\\\"\\${PrecompiledHeader}\\\" /Fp\\\"\\${PrecompiledBinary}\\\"\"\n    OBJECT_OUTPUTS \"\\${PrecompiledBinary}\")\n  SET_SOURCE_FILES_PROPERTIES(\\${Sources}\n    PROPERTIES COMPILE_FLAGS \"/Yu\\\"\\${PrecompiledHeader}\\\" /FI\\\"\\${PrecompiledBinary}\\\" /Fp\\\"\\${PrecompiledBinary}\\\"\"\n    OBJECT_DEPENDS \"\\${PrecompiledBinary}\")\n  # Add precompiled header to SourcesVar\n  LIST(APPEND \\${SourcesVar} \\${PrecompiledSource})\n  SET(MSVC_PCH_PREFIX \"\")\nENDMACRO(add_msvc_precompiled_header)\n\nset(\\${PROJECT_NAME}_CPP\n  $1.cpp\n  )\n\nset(\\${PROJECT_NAME}_H\n  $1.h\n  stdafx.h\n  targetver.h\n  )\n\nADD_MSVC_PRECOMPILED_HEADER(\"stdafx.h\" \"stdafx.cpp\" \\${PROJECT_NAME}_CPP)\n\ntarget_link_libraries(\\${PROJECT_NAME}\n  \\${MFC_LIBRARIES}\n)\n" "single project / consle application using MFC" nil nil nil nil nil nil)
					   ("wiz" "ADD_CUSTOM_COMMAND(TARGET \\${PROJECT_NAME}\n  POST_BUILD\n  COMMAND \\${PROJECT_NAME}\n  COMMENT \"testing \\${PROJECT_NAME} ...\"\n  )\n" "post-build execution(run current output exe)" nil nil nil nil nil nil)
					   ("wiz" "# configure header to assign sample data file path.\nSET(${1:CONFIGURE_VAR} ${2:CONFIGURE_VAR_VALUE})\nCONFIGURE_FILE(\\${CMAKE_CURRENT_SOURCE_DIR}/${3:configure.in.file}.in\n  \\${CMAKE_CURRENT_BINARY_DIR}/$3 @ONLY)\n" "add configure script" nil nil nil nil nil nil)
					   ("wiz" "set(CURR_PRJ $1)\n\ninclude_directories(\n  \\${CMAKE_CURRENT_BINARY_DIR}\n  )\n\nset(\\${CURR_PRJ}_source\n  $2\n  )\n\nset(\\${CURR_PRJ}_moc_header\n  )\n\nset(\\${CURR_PRJ}_header\n  )\n\nset(\\${CURR_PRJ}_form\n  )\n\nset(\\${CURR_PRJ}_resource\n  )\n\nqt4_wrap_cpp(\\${CURR_PRJ}_moc_generated \\${\\${CURR_PRJ}_moc_header})\nqt4_wrap_ui(\\${CURR_PRJ}_forms_generated \\${\\${CURR_PRJ}_form})\nqt4_add_resources(\\${CURR_PRJ}_rc_generated \\${\\${CURR_PRJ}_resource})\n\nadd_executable(\\${CURR_PRJ}\n  WIN32 MACOSX_BUNDLE\n  \\${\\${CURR_PRJ}_source}\n  \\${\\${CURR_PRJ}_header}\n  \\${\\${CURR_PRJ}_moc_header}\n  \\${\\${CURR_PRJ}_form}\n  \\${\\${CURR_PRJ}_resource}\n  \\${\\${CURR_PRJ}_moc_generated}\n  \\${\\${CURR_PRJ}_form_generated}\n  \\${\\${CURR_PRJ}_rc_generated}\n  )\n\ntarget_link_libraries(\\${CURR_PRJ}\n  \\${QT_LIBRARIES}\n  $3\n  )\n\nset_target_properties(\\${CURR_PRJ}\n  PROPERTIES\n  FOLDER $4\n  )\n" "program sub-project - using qt" nil nil nil nil nil nil)))


;;; Do not edit! File generated at Sun Feb 10 23:04:47 2013
