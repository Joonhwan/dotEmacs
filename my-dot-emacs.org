#-*- coding:utf-8-auto; -*-
#+TITLE:Joonhwan's Dotemacs
#+STARTUP:content

* Setup Basic Environment Informations
** OS/Desktop

   #+BEGIN_SRC emacs-lisp
     ;; [TIP] http://dreamstorm.cafe24.com/cgi-bin/moin.cgi/dreamstorm/emacs
     ;; 여러 환경에서 쓰기 위한 설정값들
     (defconst win32p
       (if (eq system-type 'windows-nt) t nil)
       "true if win32 nt-emacs")
     (defconst unixp
       (if (memq system-type '(hpux dgux usg-unix-v irix linux gnu/linux)) t nil)
       "true if any unix emacs")
     (defconst officep
       (if (string-match "JHLEE" system-name) t nil)
       "true if office pc")
     (defconst macp
       (if (eq system-type 'darwin) t nil))
     (defconst homep
       (not officep)
       "true if office pc")
     
     ;;
     ;; Load path etc.
     ;;
     (setq my-dotfiles-dir (file-name-directory (or (buffer-file-name) load-file-name))
           my-autoinstall-dir (concat my-dotfiles-dir "auto-install")
           ;; my-ccmode-dir (concat my-dotfiles-dir "cc-mode")
           my-dropbox-dir (cond
                           (macp "~/DropBox")
                           (t "~/DropBox"))
           my-etc-dir (concat my-dotfiles-dir "etc")
           )
     (add-to-list 'load-path my-dotfiles-dir)
     (add-to-list 'load-path my-autoinstall-dir)
     (add-to-list 'load-path (concat my-dotfiles-dir "alien/manual-package"))
  #+END_SRC

** Personal

   #+BEGIN_SRC emacs-lisp
     (setq user-full-name "Joonhwan Lee"
           user-mail-address "joonhwan.lee@gmail.com")
     (setq my-dotfiles-dir dotfiles-dir)
   #+END_SRC

** Language

   #+BEGIN_SRC emacs-lisp
     ;; language
     (cond
      (win32p
       (set-language-environment "Korean")
       )
      (t
       (global-set-key (kbd "S-SPC") 'toggle-input-method)
       )
      )
     (setq default-input-method "korean-hangul390")
     (setq default-korean-keyboard "390") ;;--> 3beolsik 390
   #+END_SRC

** some elisp helper
   #+BEGIN_SRC emacs-lisp
     ;;
     ;; hints from http://www.mygooglest.com/fni/dot-emacs.html
     ;; 
     (defvar my-missing-packages-list nil
       "List of packages that `try-require' can't find.")
     ;; attempt to load a feature/library, failing silently
     (defun my-try-require (feature)
       "Attempt to load a library or module. Return true if the
     library given as argument is successfully loaded. If not, instead
     of an error, just add the package to a list of missing packages."
       (condition-case err
           ;; protected form
           (progn
             (message "Checking for library `%s'..." feature)
             (if (stringp feature)
                 (load-library feature)
               (require feature))
             (message "Checking for library `%s'... Found" feature))
         ;; error handler
         (file-error  ; condition
          (progn
            (message "Checking for library `%s'... Missing" feature)
            (add-to-list 'my-missing-packages-list feature 'append))
          nil)))
     
     ;; from gmm-regexp-concat
     (defun my-regexp-concat (regexp)
       "Potentially concat a list of regexps into a single one.
     The concatenation is done with logical ORs."
       (cond ((null regexp)
          nil)
         ((stringp regexp)
          regexp)
         ((listp regexp)
          (mapconcat (lambda (elt) (concat "\\(" elt "\\)"))
                 regexp
                 "\\|"))))
     
     ;; from regexp-opt. 
     (defun my-file-ext-regexp-opt (extensions)
       "modified version of original `regex-opt' to handle file
     extension matcher"
       (concat "\\(?:\\.\\(?:" (regexp-opt extensions) "\\$\\)\\)"))
     
     ;; for better look(?) in c++ source code(align text lines of member var or func)
     (defun my-regexp-align-c++-member ()
       (interactive
        (align-regexp (region-beginning) (region-end) "\\(\\s-*\\)[^ ]+\\((\\|;\\)" align-default-spacing 1)))
     
     
     (defun my-disable-truncate-line ()
       (setq truncate-lines nil))
     
     (defun my-modify-alist (alist-to-modify key-to-change value-to-change)
       "Replace an element within an association list. 
     
     ALIST-TO-MODIFY must be association list's symbol.
     KEY-TO-CHANGE is a search key
     VALUE-TO-CHANGE is a value of which is KEY by matching `equal' function
     
     example:
     
     \(progn
       (setq my-frame-parameters '((menu-bar-lines . 0)
                                   (tool-bar-lines . 0)
                                   (scroll-bar . 14)
                                   (font . \"Ubuntu Mono-11:normal:antialias=natural\")))
       (setq my-frame-parameters `(,@my-frame-parameters (height . 10)))
       (my-modify-alist 'my-frame-parameters 'height 20)
       my-frame-parameters)
     
     "
       (let ((seq (symbol-value alist-to-modify))
             (alist-temp nil)
             (match-found))
         (mapcar (lambda (elem)
                   (let* ((key (car elem))
                          (val (cdr elem)))
                     (if (equal key-to-change key)
                         (progn
                           (add-to-list 'alist-temp `(,key . ,value-to-change) t)
                           (setq match-found t))
                       (add-to-list 'alist-temp elem t)
                       )
                     )
                   )
                 seq)
         (unless match-found
           (add-to-list 'alist-temp `(,key-to-change . ,value-to-change)))
         (set alist-to-modify alist-temp)
         (symbol-value alist-to-modify)
         ))
     
     (defun my-modify-alist-with-alist(alist-to-modify alist-source)
       "Replace more than one element within an association list"
       (mapcar
        (lambda (elem)
          (let* ((key (car elem))
                 (val (cdr elem)))
            (my-modify-alist alist-to-modify key val)))
        alist-source))
   #+END_SRC
** final words on dotemacs

   #+BEGIN_SRC emacs-lisp
     ;;
     ;; i'm not using normal path of emacs customization!
     ;;
     (setq custom-file (concat my-dotfiles-dir "my-customization.el"))
     
     ;; sometimes system becomes slow. here's workaround
     ;; hint from
     ;; http://stackoverflow.com/questions/2007329/emacs-23-1-50-1-hangs-ramdomly-for-6-8-seconds-on-windows-xp
     (setq w32-get-true-file-attributes nil)
     
     ;; emacs 24 에서는 아래의 값이 이미 default였다.
     (setq x-select-enable-clipboard t)
   #+END_SRC

* Theme

  #+BEGIN_SRC emacs-lisp
    
    ;;
    ;; my theme
    ;;
    (require 'custom)
    (setq custom-theme-directory (concat my-dotfiles-dir "theme"))
    (add-to-list 'load-path custom-theme-directory)
    (setq custom-safe-themes t) ;; theme should be unsafe(?) though...
    
    ;; 폰트설정
    ;; 한글 폰트를 위한 설정. 아래 default-frame-alist에서 설정한 것을
    ;; 제외한 모든 다른 인코딩의 폰트는 fontset-default에 지정된 것이
    ;; 사용되는 것 같다.
    ;;
    ;;현재로서는 글꼴의 크기를 조정해서 폭을 맞추고 있어서, 한글과
    ;;영문간의 글꼴 크기 차이가 난다. font.c 의 코드를 보았지만, 아직은
    ;;spacing 이나 scalable 같은게 어떻게 동작하는지 이해를 못하고 있다.
    (defvar my-default-font-name nil)
    (defvar my-default-font-size 90)
    (cond
     (macp
      (setq my-default-font-name "Menlo" my-default-font-size 120))
     (win32p
      (setq my-default-font-name "Bitstream Vera Sans Mono" my-default-font-size 108))
     )
    ;; 아직 수정해야 할 사항이 있어보임
    ;; 맨 마지막 post init 단계에서 호출한번 해 줌.
    (defun my-setup-font-for-mbcs ()
      (interactive)
      (cond
       (macp
        (set-fontset-font "-*-*-*-*-*-*-*-*-*-*-*-*-fontset-default" 'korean-ksc5601 "NanumGothicCoding:weight=normal:spacing=m:scalable=true")
        (setq face-font-rescale-alist '(("NanumGothicCoding" . 1.21)))
        )
       (t
        (set-fontset-font "-*-*-*-*-*-*-*-*-*-*-*-*-fontset-default" 'korean-ksc5601 "나눔고딕코딩:weight=normal:spacing=m:scalable=true")
        (setq face-font-rescale-alist '(("나눔고딕코딩" . 1.23)))
        ))
      (set-frame-font (concat my-default-font-name) t t)
      ;; (font . "나눔고딕코딩-12:normal:antialias=natural")
      ;; (font . "Monaco-11:normal:antialias=natural")
      ;; (font . "Anonymous Pro-11:normal:antialias=natural")
      ;; (font . "Andale Mono-10.0:bold:spacing=110:antialias=natural")
      ;; (font . "Monaco-12:normal:antialias=natural")
      ;; (font . "Ubuntu_Mono-14:normal:antialias=natural")
      ;; (font . "Menlo-13.5:normal:antialias=natural")
      )
    ;; 초기 테마
    (load-theme 'my-tango-dark)
    (defvar my-current-theme-is-dark t)
    
    (setq my-theme-cycle-list '('my-zenburn 'my-solarized-dark 'my-solarized-light 'my-white))
    (defvar my-default-dark-theme 'my-solarized-dark)
    (defvar my-default-light-theme 'my-solarized-light)
    (defun my-opposite-theme (curr-theme-name)
      (let ((curr-theme-split nil)
            (opposite-theme-split nil)
            )
        (if curr-theme-name
            (setq curr-theme-split (split-string curr-theme-name "-")))
        (if (> (length curr-theme-split) 2)
            (setq opposite-theme-split
                  (mapcar 
                   (lambda (e) 
                     (cond 
                      ((string= e "dark")
                       "light")
                      ((string= e "light")
                       "dark")
                      (t
                       e)))
                   curr-theme-split)))
        (c-concat-separated opposite-theme-split "-")
        )
      )
    (defun my-toggle-theme ()
      (interactive)
      (let* ((current-theme (symbol-name (car custom-enabled-themes)))
             (opposite-theme (my-opposite-theme current-theme)))
        (if (and (stringp opposite-theme)
                 (> (length opposite-theme) 0))
            (progn 
              (mapcar 'disable-theme custom-enabled-themes)
              (load-theme (intern opposite-theme) nil nil)
              (message (format "loaded [%s] theme(opposite of [%s])" opposite-theme current-theme))
              )
          (call-interactively 'my-select-theme)
          )
        )
      )
    (global-set-key (kbd "C-c t t") 'my-toggle-theme)
    
    (defun my-select-theme (theme)
      (interactive
       (list (ido-completing-read "Select my theme: " (remove-if (lambda (s) (not (s-starts-with-p "my-" s))) (mapcar 'symbol-name (custom-available-themes))))))
      (mapcar 'disable-theme custom-enabled-themes)
      (load-theme (intern theme) nil nil)
      )
    (global-set-key (kbd "C-c s t") 'my-select-theme)
    
    ;;
    ;;  from 'frame.c'
    ;;
    ;; static const struct frame_parm_table frame_parms[] =
    ;; {
    ;;   {"auto-raise",     &Qauto_raise},
    ;;   {"auto-lower",     &Qauto_lower},
    ;;   {"background-color",       0},
    ;;   {"border-color",       &Qborder_color},
    ;;   {"border-width",       &Qborder_width},
    ;;   {"cursor-color",       &Qcursor_color},
    ;;   {"cursor-type",        &Qcursor_type},
    ;;   {"font",           0},
    ;;   {"foreground-color",       0},
    ;;   {"icon-name",          &Qicon_name},
    ;;   {"icon-type",          &Qicon_type},
    ;;   {"internal-border-width",  &Qinternal_border_width},
    ;;   {"menu-bar-lines",     &Qmenu_bar_lines},
    ;;   {"mouse-color",        &Qmouse_color},
    ;;   {"name",           &Qname},
    ;;   {"scroll-bar-width",       &Qscroll_bar_width},
    ;;   {"title",          &Qtitle},
    ;;   {"unsplittable",       &Qunsplittable},
    ;;   {"vertical-scroll-bars",   &Qvertical_scroll_bars},
    ;;   {"visibility",     &Qvisibility},
    ;;   {"tool-bar-lines",     &Qtool_bar_lines},
    ;;   {"scroll-bar-foreground",  &Qscroll_bar_foreground},
    ;;   {"scroll-bar-background",  &Qscroll_bar_background},
    ;;   {"screen-gamma",       &Qscreen_gamma},
    ;;   {"line-spacing",       &Qline_spacing},
    ;;   {"left-fringe",        &Qleft_fringe},
    ;;   {"right-fringe",       &Qright_fringe},
    ;;   {"wait-for-wm",        &Qwait_for_wm},
    ;;   {"fullscreen",                &Qfullscreen},
    ;;   {"font-backend",       &Qfont_backend},
    ;;   {"alpha",          &Qalpha},
    ;;   {"sticky",         &Qsticky},
    ;;   {"tool-bar-position",      &Qtool_bar_position},
    ;; };
    
    (progn
      (setq initial-frame-alist '())
      (setq frame-title-format (concat "Emacs " emacs-version " [%*] %f" ))
      (setq fringe-mode (quote (0 . 0))
            indicate-buffer-boundaries (quote left)
            indicate-empty-lines t
            )
      (setq
       default-frame-alist
       (cond
        ((or win32p unixp)
         `((menu-bar-lines . 0)
           (tool-bar-lines . 0)
           (alpha . (100 100))
           (line-spacing . 0)
           (font . ,(format "%s-%g" my-default-font-name (* 0.1 my-default-font-size)))
           ;; (font . ,(format "%s" my-default-font-name))
           ))
        (macp
         `((menu-bar-lines . 0)
           (tool-bar-lines . 0)
           (top . 0)
           (left . -1)
           (width . 115)
           (height . 71)
           (font . ,(format "%s-%g" my-default-font-name (* 0.1 my-default-font-size)))
           ))))
      (setq initial-frame-alist default-frame-alist)
      (modify-all-frames-parameters default-frame-alist)
      )
    
    ;; 잘못 만든 함수. 1) active frame의 2) alpha값만 바꾸어야 하는데. 초기
    ;; 프레임과 전체 frame parameter가 바뀐다. :(
    ;;
    (defvar my-transparent-state-is-on t
      ""
      )
    (defun my-toggle-transparent-state ()
      (interactive)
      (setq default-frame-alist
            (if my-transparent-state-is-on
                '((alpha . (85 50)))
              '((alpha . (100 100)))))
      (setq my-transparent-state-is-on (not my-transparent-state-is-on))
      (setq initial-frame-alist default-frame-alist)
      (modify-all-frames-parameters default-frame-alist)
      )
    ;; (global-set-key (kbd "C-c t") 'my-toggle-transparent-state)
    
    ;; 커스템 테마를 만든다음 실행할 함수.
    (defun my-add-theme-faces ()
      (interactive)
      (custom-theme-add-face 'default)
      (custom-theme-add-face 'bold)
      (custom-theme-add-face 'bold-italic)
      (custom-theme-add-face 'fixed-pitch)
      (custom-theme-add-face 'italic)
      (custom-theme-add-face 'underline)
      (custom-theme-add-face 'variable-pitch)
      (custom-theme-add-face 'fringe)
      (custom-theme-add-face 'header-line)
      (custom-theme-add-face 'highlight)
      (custom-theme-add-face 'hover-highlight)
      (custom-theme-add-face 'match)
      (custom-theme-add-face 'menu)
      (custom-theme-add-face 'mouse)
      (custom-theme-add-face 'paren)
      (custom-theme-add-face 'trailing-whitespace)
      (custom-theme-add-face 'buffer-menu-buffer)
      (custom-theme-add-face 'border)
      (custom-theme-add-face 'button)
      (custom-theme-add-face 'cursor)
      (custom-theme-add-face 'escape-glyph-face)
      (custom-theme-add-face 'link)
      (custom-theme-add-face 'minibuffer-prompt)
      (custom-theme-add-face 'mode-line)
      (custom-theme-add-face 'mode-line-inactive)
      (custom-theme-add-face 'mode-line-buffer-id)
      (custom-theme-add-face 'mode-line-emphasis)
      (custom-theme-add-face 'mode-line-highlight)
      (custom-theme-add-face 'region)
      (custom-theme-add-face 'scroll-bar)
      (custom-theme-add-face 'secondary-selection)
      (custom-theme-add-face 'tool-bar)
      ;; 
      (custom-theme-add-face 'apt-utils-broken)
      (custom-theme-add-face 'apt-utils-description)
      (custom-theme-add-face 'apt-utils-field-contents)
      (custom-theme-add-face 'apt-utils-field-keyword)
      (custom-theme-add-face 'apt-utils-normal-package)
      (custom-theme-add-face 'apt-utils-summary)
      (custom-theme-add-face 'apt-utils-version)
      (custom-theme-add-face 'apt-utils-virtual-package)
      (custom-theme-add-face 'breakpoint-disabled-bitmap)
      (custom-theme-add-face 'breakpoint-enabled-bitmap)
      (custom-theme-add-face 'calendar-today)
      (custom-theme-add-face 'change-log-date)
      (custom-theme-add-face 'circe-highlight-nick-face)
      (custom-theme-add-face 'circe-my-message-face)
      (custom-theme-add-face 'circe-originator-face)
      (custom-theme-add-face 'circe-prompt-face)
      (custom-theme-add-face 'circe-server-face)
      (custom-theme-add-face 'comint-highlight-input)
      (custom-theme-add-face 'comint-highlight-prompt)
      (custom-theme-add-face 'compilation-info)
      (custom-theme-add-face 'compilation-warning)
      (custom-theme-add-face 'cscope-line-face)
      (custom-theme-add-face 'cua-rectangle)
      (custom-theme-add-face 'custom-button)
      (custom-theme-add-face 'custom-button-pressed)
      (custom-theme-add-face 'custom-changed)
      (custom-theme-add-face 'custom-comment)
      (custom-theme-add-face 'custom-comment-tag)
      (custom-theme-add-face 'custom-documentation)
      (custom-theme-add-face 'custom-group-tag)
      (custom-theme-add-face 'custom-group-tag-1)
      (custom-theme-add-face 'custom-invalid)
      (custom-theme-add-face 'custom-link)
      (custom-theme-add-face 'custom-modified)
      (custom-theme-add-face 'custom-rogue)
      (custom-theme-add-face 'custom-saved)
      (custom-theme-add-face 'custom-set)
      (custom-theme-add-face 'custom-state)
      (custom-theme-add-face 'custom-tag)
      (custom-theme-add-face 'custom-variable-button)
      (custom-theme-add-face 'custom-variable-tag)
      (custom-theme-add-face 'diary)
      (custom-theme-add-face 'dictionary-button)
      (custom-theme-add-face 'dictionary-reference)
      (custom-theme-add-face 'dictionary-word-entry)
      (custom-theme-add-face 'diff-added-face)
      (custom-theme-add-face 'diff-context-face)
      (custom-theme-add-face 'diff-file-header-face)
      (custom-theme-add-face 'diff-header-face)
      (custom-theme-add-face 'diff-hunk-header-face)
      (custom-theme-add-face 'diff-index-face)
      (custom-theme-add-face 'diff-refine-added)
      (custom-theme-add-face 'diff-refine-change-face)
      (custom-theme-add-face 'diff-removed-face)
      (custom-theme-add-face 'diredp-compressed-file-suffix)
      (custom-theme-add-face 'diredp-date-time)
      (custom-theme-add-face 'diredp-default)
      (custom-theme-add-face 'diredp-deletion)
      (custom-theme-add-face 'diredp-deletion-file-name)
      (custom-theme-add-face 'diredp-dir-heading)
      (custom-theme-add-face 'diredp-dir-priv)
      (custom-theme-add-face 'diredp-display-msg)
      (custom-theme-add-face 'diredp-exec-priv)
      (custom-theme-add-face 'diredp-executable-tag)
      (custom-theme-add-face 'diredp-file-name)
      (custom-theme-add-face 'diredp-file-suffix)
      (custom-theme-add-face 'diredp-flag-mark)
      (custom-theme-add-face 'diredp-flag-mark-line)
      (custom-theme-add-face 'diredp-ignored-file-name)
      (custom-theme-add-face 'diredp-link-priv)
      (custom-theme-add-face 'diredp-no-priv)
      (custom-theme-add-face 'diredp-number)
      (custom-theme-add-face 'diredp-other-priv)
      (custom-theme-add-face 'diredp-rare-priv)
      (custom-theme-add-face 'diredp-read-priv)
      (custom-theme-add-face 'diredp-symlink)
      (custom-theme-add-face 'diredp-write-priv)
      (custom-theme-add-face 'ediff-current-diff-A)
      (custom-theme-add-face 'ediff-current-diff-B)
      (custom-theme-add-face 'ediff-current-diff-C)
      (custom-theme-add-face 'ediff-old-diff-A)
      (custom-theme-add-face 'ediff-old-diff-B)
      (custom-theme-add-face 'ediff-old-diff-C)
      (custom-theme-add-face 'emms-pbi-current)
      (custom-theme-add-face 'emms-pbi-mark-marked)
      (custom-theme-add-face 'emms-pbi-song)
      (custom-theme-add-face 'erc-action-face)
      (custom-theme-add-face 'erc-bold-face)
      (custom-theme-add-face 'erc-current-nick-face)
      (custom-theme-add-face 'erc-dangerous-host-face)
      (custom-theme-add-face 'erc-default-face)
      (custom-theme-add-face 'erc-direct-msg-face)
      (custom-theme-add-face 'erc-error-face)
      (custom-theme-add-face 'erc-fool-face)
      (custom-theme-add-face 'erc-highlight-face)
      (custom-theme-add-face 'erc-input-face)
      (custom-theme-add-face 'erc-keyword-face)
      (custom-theme-add-face 'erc-my-nick-face)
      (custom-theme-add-face 'erc-nick-default-face)
      (custom-theme-add-face 'erc-nick-msg-face)
      (custom-theme-add-face 'erc-notice-face)
      (custom-theme-add-face 'erc-pal-face)
      (custom-theme-add-face 'erc-prompt-face)
      (custom-theme-add-face 'erc-timestamp-face)
      (custom-theme-add-face 'erc-underline-face)
      (custom-theme-add-face 'eshell-ls-archive)
      (custom-theme-add-face 'eshell-ls-backup)
      (custom-theme-add-face 'eshell-ls-clutter)
      (custom-theme-add-face 'eshell-ls-directory)
      (custom-theme-add-face 'eshell-ls-executable)
      (custom-theme-add-face 'eshell-ls-missing)
      (custom-theme-add-face 'eshell-ls-product)
      (custom-theme-add-face 'eshell-ls-special)
      (custom-theme-add-face 'eshell-ls-symlink)
      (custom-theme-add-face 'eshell-ls-unreadable)
      (custom-theme-add-face 'eshell-prompt)
      (custom-theme-add-face 'fancy-widget-button)
      (custom-theme-add-face 'fancy-widget-button-highlight)
      (custom-theme-add-face 'fancy-widget-button-pressed)
      (custom-theme-add-face 'fancy-widget-button-pressed-highlight)
      (custom-theme-add-face 'fancy-widget-documentation)
      (custom-theme-add-face 'fancy-widget-field)
      (custom-theme-add-face 'fancy-widget-inactive)
      (custom-theme-add-face 'fancy-widget-single-line-field)
      (custom-theme-add-face 'flyspell-duplicate)
      (custom-theme-add-face 'flyspell-incorrect)
      (custom-theme-add-face 'font-latex-bold)
      (custom-theme-add-face 'font-latex-sedate)
      (custom-theme-add-face 'font-latex-title-4)
      (custom-theme-add-face 'font-latex-warning)
      (custom-theme-add-face 'font-lock-builtin-face)
      (custom-theme-add-face 'font-lock-comment-delimiter-face)
      (custom-theme-add-face 'font-lock-comment-face)
      (custom-theme-add-face 'font-lock-constant-face)
      (custom-theme-add-face 'font-lock-doc-face)
      (custom-theme-add-face 'font-lock-doc-string-face)
      (custom-theme-add-face 'font-lock-function-name-face)
      (custom-theme-add-face 'font-lock-keyword-face)
      (custom-theme-add-face 'font-lock-negation-char-face)
      (custom-theme-add-face 'font-lock-operator-face)
      (custom-theme-add-face 'font-lock-preprocessor-face)
      (custom-theme-add-face 'font-lock-pseudo-keyword-face)
      (custom-theme-add-face 'font-lock-string-face)
      (custom-theme-add-face 'font-lock-type-face)
      (custom-theme-add-face 'font-lock-variable-name-face)
      (custom-theme-add-face 'font-lock-warning-face)
      (custom-theme-add-face 'gnus-cite-1-face)
      (custom-theme-add-face 'gnus-cite-10-face)
      (custom-theme-add-face 'gnus-cite-11-face)
      (custom-theme-add-face 'gnus-cite-2-face)
      (custom-theme-add-face 'gnus-cite-3-face)
      (custom-theme-add-face 'gnus-cite-4-face)
      (custom-theme-add-face 'gnus-cite-5-face)
      (custom-theme-add-face 'gnus-cite-6-face)
      (custom-theme-add-face 'gnus-cite-7-face)
      (custom-theme-add-face 'gnus-cite-8-face)
      (custom-theme-add-face 'gnus-cite-9-face)
      (custom-theme-add-face 'gnus-group-mail-1-empty-face)
      (custom-theme-add-face 'gnus-group-mail-1-face)
      (custom-theme-add-face 'gnus-group-mail-2-empty-face)
      (custom-theme-add-face 'gnus-group-mail-2-face)
      (custom-theme-add-face 'gnus-group-mail-3-empty-face)
      (custom-theme-add-face 'gnus-group-mail-3-face)
      (custom-theme-add-face 'gnus-group-mail-4-empty-face)
      (custom-theme-add-face 'gnus-group-mail-4-face)
      (custom-theme-add-face 'gnus-group-mail-5-empty-face)
      (custom-theme-add-face 'gnus-group-mail-5-face)
      (custom-theme-add-face 'gnus-group-mail-6-empty-face)
      (custom-theme-add-face 'gnus-group-mail-6-face)
      (custom-theme-add-face 'gnus-group-mail-low-empty-face)
      (custom-theme-add-face 'gnus-group-mail-low-face)
      (custom-theme-add-face 'gnus-group-news-1-empty-face)
      (custom-theme-add-face 'gnus-group-news-1-face)
      (custom-theme-add-face 'gnus-group-news-2-empty-face)
      (custom-theme-add-face 'gnus-group-news-2-face)
      (custom-theme-add-face 'gnus-group-news-3-empty-face)
      (custom-theme-add-face 'gnus-group-news-3-face)
      (custom-theme-add-face 'gnus-group-news-4-empty-face)
      (custom-theme-add-face 'gnus-group-news-4-face)
      (custom-theme-add-face 'gnus-group-news-5-empty-face)
      (custom-theme-add-face 'gnus-group-news-5-face)
      (custom-theme-add-face 'gnus-group-news-6-empty-face)
      (custom-theme-add-face 'gnus-group-news-6-face)
      (custom-theme-add-face 'gnus-group-news-low-empty-face)
      (custom-theme-add-face 'gnus-group-news-low-face)
      (custom-theme-add-face 'gnus-header-content-face)
      (custom-theme-add-face 'gnus-header-from-face)
      (custom-theme-add-face 'gnus-header-name-face)
      (custom-theme-add-face 'gnus-header-newsgroups-face)
      (custom-theme-add-face 'gnus-header-subject-face)
      (custom-theme-add-face 'gnus-signature-face)
      (custom-theme-add-face 'gnus-summary-cancelled-face)
      (custom-theme-add-face 'gnus-summary-high-ancient-face)
      (custom-theme-add-face 'gnus-summary-high-read-face)
      (custom-theme-add-face 'gnus-summary-high-ticked-face)
      (custom-theme-add-face 'gnus-summary-high-unread-face)
      (custom-theme-add-face 'gnus-summary-low-ancient-face)
      (custom-theme-add-face 'gnus-summary-low-read-face)
      (custom-theme-add-face 'gnus-summary-low-ticked-face)
      (custom-theme-add-face 'gnus-summary-low-unread-face)
      (custom-theme-add-face 'gnus-summary-normal-ancient-face)
      (custom-theme-add-face 'gnus-summary-normal-read-face)
      (custom-theme-add-face 'gnus-summary-normal-ticked-face)
      (custom-theme-add-face 'gnus-summary-normal-unread-face)
      (custom-theme-add-face 'gnus-summary-selected-face)
      (custom-theme-add-face 'gnus-x-face)
      (custom-theme-add-face 'helm-ff-directory)
      (custom-theme-add-face 'helm-ff-executable)
      (custom-theme-add-face 'helm-ff-file)
      (custom-theme-add-face 'helm-grep-file)
      (custom-theme-add-face 'helm-grep-match)
      (custom-theme-add-face 'helm-header)
      (custom-theme-add-face 'helm-match)
      (custom-theme-add-face 'helm-selection)
      (custom-theme-add-face 'helm-selection-line)
      (custom-theme-add-face 'helm-source-header)
      (custom-theme-add-face 'helm-visible-mark)
      (custom-theme-add-face 'help-argument-name)
      (custom-theme-add-face 'hi-blue)
      (custom-theme-add-face 'hi-green)
      (custom-theme-add-face 'hi-pink)
      (custom-theme-add-face 'hi-yellow)
      (custom-theme-add-face 'highlight-current-line)
      (custom-theme-add-face 'hl-line)
      (custom-theme-add-face 'holiday)
      (custom-theme-add-face 'ibuffer-deletion)
      (custom-theme-add-face 'ibuffer-help-buffer)
      (custom-theme-add-face 'ibuffer-marked)
      (custom-theme-add-face 'ibuffer-special-buffer)
      (custom-theme-add-face 'icompletep-choices)
      (custom-theme-add-face 'icompletep-determined)
      (custom-theme-add-face 'icompletep-keys)
      (custom-theme-add-face 'icompletep-nb-candidates)
      (custom-theme-add-face 'ido-first-match)
      (custom-theme-add-face 'ido-only-match)
      (custom-theme-add-face 'ido-subdir)
      (custom-theme-add-face 'imaxima-latex-error)
      (custom-theme-add-face 'info-header-node)
      (custom-theme-add-face 'info-header-xref)
      (custom-theme-add-face 'info-menu-5)
      (custom-theme-add-face 'info-menu-header)
      (custom-theme-add-face 'info-menu-star)
      (custom-theme-add-face 'info-node)
      (custom-theme-add-face 'info-title-4)
      (custom-theme-add-face 'info-xref)
      (custom-theme-add-face 'info-xref-visited)
      (custom-theme-add-face 'isearch)
      (custom-theme-add-face 'isearch-fail)
      (custom-theme-add-face 'jabber-chat-prompt-foreign)
      (custom-theme-add-face 'jabber-chat-prompt-local)
      (custom-theme-add-face 'jabber-rare-time-face)
      (custom-theme-add-face 'jabber-roster-user-away)
      (custom-theme-add-face 'jabber-roster-user-chatty)
      (custom-theme-add-face 'jabber-roster-user-dnd)
      (custom-theme-add-face 'jabber-roster-user-error)
      (custom-theme-add-face 'jabber-roster-user-offline)
      (custom-theme-add-face 'jabber-roster-user-online)
      (custom-theme-add-face 'jabber-roster-user-xa)
      (custom-theme-add-face 'jabber-title-large)
      (custom-theme-add-face 'jabber-title-medium)
      (custom-theme-add-face 'jabber-title-small)
      (custom-theme-add-face 'jde-java-font-lock-constant-face)
      (custom-theme-add-face 'jde-java-font-lock-doc-tag-face)
      (custom-theme-add-face 'jde-java-font-lock-link-face)
      (custom-theme-add-face 'jde-java-font-lock-modifier-face)
      (custom-theme-add-face 'jde-java-font-lock-number-face)
      (custom-theme-add-face 'jde-java-font-lock-operator-face)
      (custom-theme-add-face 'jde-java-font-lock-package-face)
      (custom-theme-add-face 'keywiz-command-face)
      (custom-theme-add-face 'keywiz-right-face)
      (custom-theme-add-face 'keywiz-wrong-face)
      (custom-theme-add-face 'lazy-highlight)
      (custom-theme-add-face 'magit-branch)
      (custom-theme-add-face 'magit-item-highlight)
      (custom-theme-add-face 'magit-section-title)
      (custom-theme-add-face 'makefile-shell)
      (custom-theme-add-face 'makefile-space)
      (custom-theme-add-face 'message-cited-text-face)
      (custom-theme-add-face 'message-header-cc-face)
      (custom-theme-add-face 'message-header-from-face)
      (custom-theme-add-face 'message-header-name-face)
      (custom-theme-add-face 'message-header-newsgroups-face)
      (custom-theme-add-face 'message-header-other-face)
      (custom-theme-add-face 'message-header-subject-face)
      (custom-theme-add-face 'message-header-to-face)
      (custom-theme-add-face 'message-header-xheader-face)
      (custom-theme-add-face 'message-mml-face)
      (custom-theme-add-face 'message-separator-face)
      (custom-theme-add-face 'minimap-active-region-background)
      (custom-theme-add-face 'mm/master-face)
      (custom-theme-add-face 'mm/mirror-face)
      (custom-theme-add-face 'org-agenda-clocking)
      (custom-theme-add-face 'org-agenda-date)
      (custom-theme-add-face 'org-agenda-date-today)
      (custom-theme-add-face 'org-agenda-date-weekend)
      (custom-theme-add-face 'org-agenda-structure)
      (custom-theme-add-face 'org-archived)
      (custom-theme-add-face 'org-checkbox)
      (custom-theme-add-face 'org-date)
      (custom-theme-add-face 'org-deadline-announce)
      (custom-theme-add-face 'org-document-title)
      (custom-theme-add-face 'org-done)
      (custom-theme-add-face 'org-formula)
      (custom-theme-add-face 'org-headline-done)
      (custom-theme-add-face 'org-hide)
      (custom-theme-add-face 'org-level-1)
      (custom-theme-add-face 'org-level-2)
      (custom-theme-add-face 'org-level-3)
      (custom-theme-add-face 'org-level-4)
      (custom-theme-add-face 'org-level-5)
      (custom-theme-add-face 'org-level-6)
      (custom-theme-add-face 'org-level-7)
      (custom-theme-add-face 'org-level-8)
      (custom-theme-add-face 'org-link)
      (custom-theme-add-face 'org-scheduled)
      (custom-theme-add-face 'org-scheduled-previously)
      (custom-theme-add-face 'org-scheduled-today)
      (custom-theme-add-face 'org-special-keyword)
      (custom-theme-add-face 'org-table)
      (custom-theme-add-face 'org-tag)
      (custom-theme-add-face 'org-time-grid)
      (custom-theme-add-face 'org-todo)
      (custom-theme-add-face 'org-upcoming-deadline)
      (custom-theme-add-face 'org-warning)
      (custom-theme-add-face 'outline-1)
      (custom-theme-add-face 'outline-2)
      (custom-theme-add-face 'outline-3)
      (custom-theme-add-face 'outline-4)
      (custom-theme-add-face 'outline-5)
      (custom-theme-add-face 'outline-6)
      (custom-theme-add-face 'outline-7)
      (custom-theme-add-face 'outline-8)
      (custom-theme-add-face 'rainbow-delimiters-depth-1-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-10-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-11-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-12-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-2-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-3-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-4-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-5-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-6-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-7-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-8-face)
      (custom-theme-add-face 'rainbow-delimiters-depth-9-face)
      (custom-theme-add-face 'rcirc-bright-nick)
      (custom-theme-add-face 'rcirc-dim-nick)
      (custom-theme-add-face 'rcirc-mode-line-nick)
      (custom-theme-add-face 'rcirc-my-nick)
      (custom-theme-add-face 'rcirc-nick-in-message)
      (custom-theme-add-face 'rcirc-other-nick)
      (custom-theme-add-face 'rcirc-prompt)
      (custom-theme-add-face 'rcirc-server)
      (custom-theme-add-face 'rcirc-server-prefix)
      (custom-theme-add-face 'rcirc-timestamp)
      (custom-theme-add-face 'rst-level-1-face)
      (custom-theme-add-face 'rst-level-2-face)
      (custom-theme-add-face 'rst-level-3-face)
      (custom-theme-add-face 'rst-level-4-face)
      (custom-theme-add-face 'setnu-line-number)
      (custom-theme-add-face 'show-paren-match)
      (custom-theme-add-face 'show-paren-mismatch)
      (custom-theme-add-face 'speedbar-button-face)
      (custom-theme-add-face 'speedbar-directory-face)
      (custom-theme-add-face 'speedbar-file-face)
      (custom-theme-add-face 'speedbar-highlight-face)
      (custom-theme-add-face 'speedbar-tag-face)
      (custom-theme-add-face 'strokes-char-face)
      (custom-theme-add-face 'todoo-item-assigned-header-face)
      (custom-theme-add-face 'todoo-item-header-face)
      (custom-theme-add-face 'todoo-sub-item-header-face)
      (custom-theme-add-face 'tuareg-font-lock-governing-face)
      (custom-theme-add-face 'tuareg-font-lock-interactive-error-face)
      (custom-theme-add-face 'tuareg-font-lock-interactive-output-face)
      (custom-theme-add-face 'tuareg-font-lock-operator-face)
      (custom-theme-add-face 'twittering-uri-face)
      (custom-theme-add-face 'twittering-username-face)
      (custom-theme-add-face 'w3m-anchor-face)
      (custom-theme-add-face 'w3m-arrived-anchor-face)
      (custom-theme-add-face 'w3m-form-button-face)
      (custom-theme-add-face 'w3m-form-button-mouse-face)
      (custom-theme-add-face 'w3m-form-button-pressed-face)
      (custom-theme-add-face 'w3m-form-face)
      (custom-theme-add-face 'w3m-image-face)
      (custom-theme-add-face 'w3m-tab-background-face)
      (custom-theme-add-face 'w3m-tab-selected-face)
      (custom-theme-add-face 'w3m-tab-selected-retrieving-face)
      (custom-theme-add-face 'w3m-tab-unselected-face)
      (custom-theme-add-face 'w3m-tab-unselected-retrieving-face)
      (custom-theme-add-face 'wg-brace-face)
      (custom-theme-add-face 'wg-command-face)
      (custom-theme-add-face 'wg-current-workgroup-face)
      (custom-theme-add-face 'wg-divider-face)
      (custom-theme-add-face 'wg-filename-face)
      (custom-theme-add-face 'wg-frame-face)
      (custom-theme-add-face 'wg-message-face)
      (custom-theme-add-face 'wg-mode-line-face)
      (custom-theme-add-face 'wg-other-workgroup-face)
      (custom-theme-add-face 'wg-previous-workgroup-face)
      (custom-theme-add-face 'wgrep-delete-face)
      (custom-theme-add-face 'wgrep-face)
      (custom-theme-add-face 'which-func)
      (custom-theme-add-face 'wl-highlight-folder-few-face)
      (custom-theme-add-face 'wl-highlight-folder-many-face)
      (custom-theme-add-face 'wl-highlight-folder-path-face)
      (custom-theme-add-face 'wl-highlight-folder-unknown-face)
      (custom-theme-add-face 'wl-highlight-folder-unread-face)
      (custom-theme-add-face 'wl-highlight-folder-zero-face)
      (custom-theme-add-face 'wl-highlight-message-citation-header)
      (custom-theme-add-face 'wl-highlight-message-cited-text-1)
      (custom-theme-add-face 'wl-highlight-message-cited-text-2)
      (custom-theme-add-face 'wl-highlight-message-cited-text-3)
      (custom-theme-add-face 'wl-highlight-message-cited-text-4)
      (custom-theme-add-face 'wl-highlight-message-header-contents)
      (custom-theme-add-face 'wl-highlight-message-header-contents-face)
      (custom-theme-add-face 'wl-highlight-message-headers-face)
      (custom-theme-add-face 'wl-highlight-message-important-header-contents)
      (custom-theme-add-face 'wl-highlight-message-important-header-contents2)
      (custom-theme-add-face 'wl-highlight-message-signature)
      (custom-theme-add-face 'wl-highlight-message-unimportant-header-contents)
      (custom-theme-add-face 'wl-highlight-summary-answered-face)
      (custom-theme-add-face 'wl-highlight-summary-displaying-face)
      (custom-theme-add-face 'wl-highlight-summary-disposed-face)
      (custom-theme-add-face 'wl-highlight-summary-new-face)
      (custom-theme-add-face 'wl-highlight-summary-normal-face)
      (custom-theme-add-face 'wl-highlight-summary-refiled-face)
      (custom-theme-add-face 'wl-highlight-summary-thread-top-face)
      (custom-theme-add-face 'wl-highlight-thread-indent-face)
      )
  #+END_SRC

* Preparing External Emacs Packages

  주로 el-get을 사용. 하지만, 가끔은 elpa를 쓰기도 함.

  맨 먼저 el-get과 elpa 자체에 대한 설정을 한다. el-get의 경우에는 
  아예 시스템에 없는 경우 설치부터한다.

  다만, el-get을 쓰기위해서는 git,svn,hg 가 설치되어 있어야 하고, 항상 온라인상태여야 한다.

  #+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path (concat my-dotfiles-dir "alien/el-get-package/el-get"))
    
    ;; (setq-default package-user-dir (concat my-dotfiles-dir "alien/elpa-package"))
    (setq-default el-get-dir (concat my-dotfiles-dir "alien/el-get-package"))
    ;; (eval-after-load "el-get"
    ;;   `(progn
    ;;      (add-to-list 'el-get-recipe-path (concat my-dotfiles-dir "el-get-recipes"))))
    
    (unless (require 'el-get nil t)
      (with-current-buffer
          (url-retrieve-synchronously
           ;; "https://raw.github.com/dimitri/el-get/master/el-get-install.el"
           "https://raw.github.com/joonhwan/el-get/master/el-get-install.el"
           )
        (let ((el-get-master-branch t)
              (el-get-git-install-url "git@github.com:joonhwan/el-get.git"))
          (end-of-buffer)
          (eval-print-last-sexp))))
    
    (unless (functionp 'el-get-package-name)
      (defun el-get-package-name (package-symbol)
        "Returns a string package"
        (if (symbolp package-symbol)
            (cadr (split-string (format "%s" package-symbol) ":"))
          package-symbol))
      )
    
    (eval-after-load "package"
      '(progn
         (add-to-list 'package-archives
                      '("elpa" . "http://tromey.com/elpa/"))
         ;; Add the user-contributed repository
         (add-to-list 'package-archives
                      '("marmalade" . "http://marmalade-repo.org/packages/"))
         ))
    
    ;;
    ;; hint from https://github.com/DarwinAwardWinner/dotemacs
    ;;
    (defun el-get-package-name-from-url (url)
      (let ((basename (file-name-nondirectory url)))
        (if (string-match-p "\\.el$" basename)
            (file-name-sans-extension basename)
          basename)))
    
    (defun el-get-package-name-from-git (url)
      (let ((basename (file-name-nondirectory url)))
        (if (string-match "^\\(.*?\\)\\(\\.el\\)?\\(\\.git\\)?$" basename)
            (match-string 1 basename)
          url)))
    
    ;; local sources
    (setq el-get-sources
          '(
            (:name auto-complete
                   :type github
                   :pkgname "auto-complete/auto-complete"
                   )
            (:name cdb-gud
                   :type emacswiki
                   :pkgname "cdb-gud"
                   )
            (:name cmake-project
                   :type github
                   :pkgname "joonhwan/emacs-cmake-project"
                   )
            (:name fuzzy
                   :type github
                   :pkgname "auto-complete/fuzzy-el"
                   )
            (:name emacs-git-gutter
                   :type github
                   :pkgname "syohex/emacs-git-gutter"
                   )
            (:name emacs-loc-changes
                   :type github
                   :pkgname "rocky/emacs-loc-changes"
                   )
            (:name emacs-load-relative
                   :type github
                   :pkgname "rocky/emacs-load-relative"
                   )
            (:name emacs-test-unit
                   :type github
                   :pkgname "rocky/emacs-test-unit"
                   )
            (:name emacs-dbgr
                   :type github
                   :pkgname "rocky/emacs-dbgr"
                   )
            (:name evil
                   :type git
                   :url "git://gitorious.org/evil/evil.git"
                   )
            (:name emacs-clang-complete-async
                   :type github
                   :pkgname "joonhwan/emacs-clang-complete-async"
                   )
            ;; (:name auto-yasnippet
            ;;     :description "Quickly create disposable yasnippets"
            ;;     :type emacswiki
            ;;     :features auto-yasnippet
            ;;     )
            (:name font-utils
                   :website "http://www.emacswiki.org/emacs-en/FontUtils"
                   :description "Utility functions for working with fonts."
                   :type github
                   :pkgname "rolandwalker/font-utils"
                   ;; :post-ini (progn
                   ;;          (require 'font-utils)
                   ;;          )
                   )
            (:name iedit
                   :website "https://github.com/victorhge/iedit"
                   :description "Edit multiple regions in the same way simultaneously"
                   :type github
                   :pkgname "victorhge/iedit"
                   :features iedit
                   )
            ;; (:name pastebin
            ;;        :description "Emacs pastebin"
            ;;        :type github
            ;;        :pkgname "emacs-pastebin"
            ;;        )
            (:name pcache
                   :type github
                   :pkgname "sigma/pcache"
                   )
            (:name logito
                   :type github
                   :pkgname "sigma/logito"
                   )
            (:name gh-gist
                   :type github
                   :pkgname "sigma/gh.el"
                   :depends (pcache logito)
                   )
            (:name gist
                   :type github
                   :pkgname "defunkt/gist.el"
                   :depends gh-gist
                   )
            (:name miniedit
                   :website "https://github.com/emacsmirror/miniedit"
                   :description "Enhanced editing for minibuffer fields"
                   :type github
                   :pkgname "emacsmirror/miniedit"
                   :post-ini (progn
                               (require 'miniedit)
                               (miniedit-install)
                               )
                   )
            (:name multiple-cursors
                   :website "https://github.com/magnars/multiple-cursors.el"
                   :description "Multiple cursors for Emacs"
                   :type git
                   :url "git://github.com/magnars/multiple-cursors.el.git"
                   )
            (:name iflipb
                   :description "iflipb is ALT-TAB like buffer switching without full cycling."
                   :type hg
                   :url "http://hg.rosdahl.net/iflipb"
                   )
            (:name qml-mode
                   :type git
                   :url "git://github.com/joonhwan/qml-mode.git"
                   )
            ;; (:name log4j-mode
            ;;     :type elpa
            ;;     )
            (:name flymake-cursor
                   :description "displays flymake error msg in minibuffer after delay"
                   :type emacswiki
                   :features flymake-cursor
                   )
            (:name everything
                   :description "find files with everything"
                   :type emacswiki
                   :features everything
                   )
            (:name magit
                   :website "https://github.com/magit/magit#readme"
                   :description "It's Magit! An Emacs mode for Git."
                   :type github
                   :pkgname "magit/magit"
                   ;; :info "."
                   ;; ;; that used to be how to build it :build ("./autogen.sh" "./configure" "make")
                   ;; :build ("make all")
                   ;; :build/darwin `(,(concat "PATH=" (shell-quote-argument invocation-directory) ":$PATH make all"))
                   )
            ;; elisp에서 문자열구연 레퍼런스 삼을 만한 것
            (:name s_dot_el
                   :description "The long lost Emacs string manipulation library."
                   :type github
                   :pkgname "magnars/s.el"
                   )
            (:name dash
                   :description "A modern list api for Emacs. No 'cl required."
                   :type github
                   :pkgname "magnars/dash.el"
                   )
            (:name projectile
                   :description "Projectile is a project interaction library for Emacs"
                   :type git
                   :prepare (progn
                              (setq-default projectile-keymap-prefix (kbd "C-c j"))
                              )
                   ;;:url "git@github.com:joonhwan/projectile.git"
                   :url "git://github.com/bbatsov/projectile.git"
                   :depends s_dot_el dash
                   ;; do-not (require 'projectile ) yet
                   ;; :features projectile
                   )
            ;; (:name smartparens
            ;;     :description "Modern minor mode for Emacs that deals with parens pairs and tries to be smart about it."
            ;;     :type github
            ;;     :pkgname "Fuco1/smartparens"
            ;;     )
            ;; (:name replace+
            ;;     :description "Extensions to `replace.el'."
            ;;     :type emacswiki
            ;;     :features replace+
            ;;     :depends thingatpt+
            ;;     )
            (:name thingatpt+
                   :description "Extensions to `thingatpt.el'."
                   :type emacswiki
                   :features thingatpt+
                   )
            (:name xcscope
                   :description "cscope interface for (X)Emacs"
                   :type git
                   :url "git://github.com/emacsattic/xcscope.git"
                   :features xcscope
                   )
            (:name ido-ubiquitous
                   :description "ido everywhere."
                   :type git
                   :url "git://github.com/technomancy/ido-ubiquitous.git")
            (:name warp
                   :description "Realtime HTML Preview for Emacs"
                   :type git
                   :url "git://github.com/yukihr/Warp.git")
            (:name wgrep
                   :description "Writable grep buffer and apply the changes to files"
                   :type git
                   :url "git://github.com/mhayashi1120/Emacs-wgrep.git")
            )
          )
    
    (cond
     (macp
      (setq my-platform-packages
            '(
              emacs-w3m
              )
            )
      (setq el-get-sources
            (append el-get-sources
                    '(
                      (:name emacs-xcode-document-viewer
                             :description "emacs xcode doc viewer"
                             :type github
                             :pkgname "joonhwan/emacs-xcode-document-viewer"
                             )
                      (:name dash-at-point
                             :description "a emacs lisp for searching the word at point with Dash"
                             :type github
                             :pkgname "Kapeli/dash-at-point"
                             )
                      )
                    ))
      )
     (win32p
      (setq my-platform-packages
            nil
            )
      (setq el-get-sources
            (append el-get-sources
                    nil)
            
            ))
     )
    
    (setq my-packages
          (append
           '(
             ace-jump-mode
             auto-install
             ;; auto-complete-clang
             csharp-mode
             deferred
             diminish
             dired-details
             ;; dbgr
             el-get
             expand-region
             full-ack
             js2-mode
             goto-last-change
             graphviz-dot-mode
             gtranslate
             helm
             htmlize
             keywiz
             lua-mode
             magit
             markdown-mode
             ;; mark-multiple
             ;; org-mode
             package
             popwin
             ;; popup
             rainbow-delimiters
             rainbow-mode
             smex
             ;; switch-window
             undo-tree
             yasnippet
             yaml-mode
             )
           my-platform-packages
           (mapcar 'el-get-source-name el-get-sources)))
    
    (el-get 'sync my-packages)
    
    (package-initialize)
  #+END_SRC
* Editing Environment
** General Editings 
  my-editing.el 에 있던 것 
  #+BEGIN_SRC emacs-lisp
    (require 'generic-x) ;; for many files' editing
    
    ;; my on/off option
    (defvar i-use-save-history-mode t)
    (defvar i-use-save-place t)
    (defvar i-use-ibuffer-mode t)
    (defvar i-use-directory-abbrev nil)
    (defvar i-use-uniquify t)
    (defvar i-use-popwin t)
    (defvar i-use-yas t)
    
    ;; platform independent setq
    (setq
     ;; no splash
     inhibit-startup-message t
     ;; no raising of frame when emacs print message on minibuffer
     minibuffer-auto-raise nil
     ;; deleting file into recycle bin...
     delete-by-moving-to-trash t
     ;; truncate none whenver it is enabled
     truncate-partial-width-windows nil
     ;; any duplicated history item will be removed!!!
     history-delete-duplicates t
     ;; ;; not to split horizontally that I hate.. especially in wide screen
     ;; split-height-threshold 120
     ;; recursive minibuffer command now possible
     enable-recursive-minibuffers t
     ;; --- hard to remember(file name completion incase sensitively) --
     ;;
     ;; match file name case --> automatically set by emacs
     ;; ;; match file name case
     ;; read-file-name-completion-ignore-case t ;;
     ;; match buffer name case
     read-buffer-completion-ignore-case t
     ;; every completion excluding filename/buffername case
     completion-ignore-case t
     ;; search/match ignore case
     case-fold-search t
     ;; quiet
     visible-bell t
     ;;
     hscroll-step 5
     ;;
     standard-indent 4
     ;;
     default-tab-width 4
     ;; when pressing 'q' in customize buffer, kill it
     custom-buffer-done-kill t
     ;; 
     make-backup-files nil
     ;; no need double space between sentences
     sentence-end-double-space nil
     ;; 더 빠른 keystroke의 echo.(기본값은 1. -> 느림)
     ;; -keystrokes 0.02
     ;; hint from : http://aaronhawley.livejournal.com/29311.html
     revert-without-query '("\\.cpp" "\\.h" "\\.m" "\\.hpp" "\\.py" "CMakeLists.txt" "\\.cmake")
     ;;
     completion-ignored-extensions '(".svn/" "CVS/" ".o" "~" ".bin" ".bak" ".obj" ".map" ".ico" ".pif" ".lnk" ".a" ".ln" ".blg" ".bbl" ".dll" ".drv" ".vxd" ".386" ".elc" ".lof" ".glo" ".idx" ".lot" ".dvi" ".fmt" ".tfm" ".pdf" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".fasl" ".ufsl" ".fsl" ".dxl" ".pfsl" ".dfsl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo")
     safe-local-variable-values '(
                                  (eval rainbow-mode t)
                                  (my-org-current-project-name . "orgwiki")
                                  )
     ;; i use command key as meta 
     mac-command-modifier 'meta
     )
    
    (progn
      ;; Auto refresh buffers
      (global-auto-revert-mode 1)
      ;; Also auto refresh dired, but be quiet about it
      (setq global-auto-revert-non-file-buffers t
            auto-revert-verbose nil
            )
      ;; Turn off mouse interface early in startup to avoid momentary display
      (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
      (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
      (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
      ;; display column number
      (column-number-mode 1)
      ;; no truncate-line
      (toggle-truncate-lines 0)
      )
    
    ;; per platform setq
    (cond
     (win32p
      )
     (macp
      (setq ring-bell-function (lambda () t)))
     )
    
    ;; function alias
    (fset `yes-or-no-p `y-or-n-p)
    (defalias `dtw `delete-trailing-whitespace)
    (defalias `wcr `whitespace-cleanup-region)
    (defalias `rrr `revert-buffer)
    (defalias `cc `compile)
    (defalias `ccc `my-compile-this-file-only)
    (defalias `ffb `font-lock-fontify-buffer)
    (defalias `tdoe `toggle-debug-on-error)
    (defalias `tdoq `toggle-debug-on-quit)
    
    
    ;;
    ;; full option config
    ;;
    (when i-use-save-history-mode
      (savehist-mode 1)
      (setq
       savehist-additional-variables
       '(
         file-name-history
         compile-history
         regexp-history
         grep-files-history
         grep-regexp-history
         dired-shell-command-history
         shell-command-history
         ))
      )
    
    (when i-use-save-place
      (setq-default save-place t)
      (require 'saveplace)
      )
    
    (when i-use-ibuffer-mode
      (autoload 'ibuffer "ibuffer" "List buffers." t)
      (global-set-key (kbd "C-x C-b") 'ibuffer)
      (setq ibuffer-eliding-string ">>"
            ibuffer-formats (quote (("[" mark modified read-only "]" (name 30 30 :left) " " (mode 16 16 :left :elide) " " filename-and-process) (mark " " (name 16 -1) " " filename)))
            ibuffer-marked-face (quote info-menu-star)))
    
    (when i-use-uniquify
      (require 'uniquify)
      (setq
       uniquify-buffer-name-style 'post-forward-angle-brackets
       uniquify-separator "@"
       uniquify-min-dir-content 2
       ))
    
    (add-hook 'recentf-load-hook
              (lambda ()
                (setq recentf-max-saved-items 500)
                ))
    
    (when i-use-directory-abbrev
      (setq directory-abbrev-alist
            '(
              ;; ("^\\(/view/[^/]*\\).*/vobs" . "\\1/vobs")
              ("^\\.*/pis" . "d:/prj/wp/pis/trunk")
              ("^\\.*/sis" . "d:/prj/wp/sis/trunk/src")
              ("^\\(/view/[^/]*\\).*/opal" . "\\1/vobs/opal")
              ("^\\(/view/[^/]*\\).*/sub" . "\\1/vobs/opal/subsystems")
              ("^[/]?asx" . "/view/jwlee_asx/")
              ("^[/]?rel16" . "/view/jwlee_rel16/")
              ))
    
      (defun my-abbreviate-file-name (filename)
        "Return a version of FILENAME shortened using `directory-abbrev-alist'.
    This also substitutes \"~\" for the user's home directory (unless the
    home directory is a root directory) and removes automounter prefixes
    \(see the variable `automount-dir-prefix')."
        ;; Get rid of the prefixes added by the automounter.
        (save-match-data
          (if (and automount-dir-prefix
                   (string-match automount-dir-prefix filename)
                   (file-exists-p (file-name-directory
                                   (substring filename (1- (match-end 0))))))
              (setq filename (substring filename (1- (match-end 0)))))
          (let ((tail directory-abbrev-alist)
                (filename-cand))
            ;; If any elt of directory-abbrev-alist matches this name,
            ;; abbreviate accordingly.
            (while tail
              (unless (file-exists-p filename)
                (setq filename-cand (replace-regexp-in-string (car (car tail)) (cdr (car tail)) filename))
                (if (file-exists-p filename-cand)
                    (setq filename filename-cand)))
              ;; (if (string-match (car (car tail)) filename)
              ;;    (setq filename
              ;;          (concat (cdr (car tail)) (substring filename (match-end 0)))
              ;;          ))
              (setq tail (cdr tail)))
            ;; Compute and save the abbreviated homedir name.
            ;; We defer computing this until the first time it's needed, to
            ;; give time for directory-abbrev-alist to be set properly.
            ;; We include a slash at the end, to avoid spurious matches
            ;; such as `/usr/foobar' when the home dir is `/usr/foo'.
            (or abbreviated-home-dir
                (setq abbreviated-home-dir
                      (let ((abbreviated-home-dir "$foo"))
                        (concat "^" (abbreviate-file-name (expand-file-name "~"))
                                "\\(/\\|\\'\\)"))))
    
            ;; If FILENAME starts with the abbreviated homedir,
            ;; make it start with `~' instead.
            (if (and (string-match abbreviated-home-dir filename)
                     ;; If the home dir is just /, don't change it.
                     (not (and (= (match-end 0) 1)
                               (= (aref filename 0) ?/)))
                     ;; MS-DOS root directories can come with a drive letter;
                     ;; Novell Netware allows drive letters beyond `Z:'.
                     (not (and (or (eq system-type 'ms-dos)
                                   (eq system-type 'cygwin)
                                   (eq system-type 'windows-nt))
                               (save-match-data
                                 (string-match "^[a-zA-`]:/$" filename)))))
                (setq filename
                      (concat "~"
                              (match-string 1 filename)
                              (substring filename (match-end 0)))))
            filename)))
      ;; replace original abbreviate-file-name
      (fset 'abbreviate-file-name 'my-abbreviate-file-name)
      )
    
    (when (and i-use-popwin
               (my-try-require "popwin"))
      (setq
       display-buffer-function 'popwin:display-buffer
       special-display-function 'popwin:special-display-popup-window
       special-display-regexps `(,(regexp-opt '(
                                                "\\*selection\\*"
                                                "\\*completions\\*"
                                                "\\*Completions\\*"
                                                "\\*Help\\*"
                                                "\\*shell\\*"
                                                )))
       ;; special-display-buffer-names '("*cmd shell*" "*compilation*"))
       )
      (setq popwin:special-display-config
            '(("*cscope*" :height 20)
              ("*shell*" :height 15)
              ("*Python*" :height 15)
              ("*Help*")
              ("*Completions*" :noselect t)
              ;; ("*compilation*" :noselect t)
              ;; ("*Occur*" :noselect t)
              ))
      ;; (push '("*Python*" :height 15) popwin:special-display-config)
      ;; (push '("*shell*" :height 15) popwin:special-display-config)
      ;; (push '("*cscope*" :height 20) popwin:special-display-config)
      (global-set-key (kbd "C-c p") popwin:keymap)
      )
    
    (when (and i-use-yas
               (my-try-require 'yasnippet))
      (setq
       ;; not to use original yas/x-prompt at first
       yas/prompt-functions '(yas/dropdown-prompt yas/completing-prompt)
       ;; my private snippets
       )
      (setq yas/snippet-dirs
            `(,(concat my-dotfiles-dir "snippets")
              ,(concat my-dotfiles-dir "alien/el-get-package/yasnippet/snippets")))
      (yas/global-mode 1)
      )
    
    (eval-after-load "info"
      '(progn
         (cond
          (win32p
           (setq Info-default-directory-list '(
                                               "c:/dev/emacs/emacs/info"
                                               "c:/dev/gnuwin32/info"
                                               ))
           )
          )
         )
      )
    
    (eval-after-load "rainbow-mode"
      '(progn
         (add-to-list 'rainbow-hexadecimal-colors-font-lock-keywords
                      '("QColor(\s*\\([0-9]\\{1,3\\}\\(?:\s*%\\)?\\)\s*,\s*\\([0-9]\\{1,3\\}\\(?:\s*%\\)?\\)\s*,\s*\\([0-9]\\{1,3\\}\\(?:\s*%\\)?\\)\s*)" (0 (rainbow-colorize-rgb))))
         )
      )
    
    ;;
    ;; replace/occur
    ;; 
    (eval-after-load "replace"
      '(progn
         (setq list-matching-lines-default-context-lines 0)
         (add-hook 'occur-hook
                   '(lambda()
                      (next-error-follow-minor-mode t)))
         ))
    
    (eval-after-load "woman"
      '(progn
         (cond
          (win32p
           (setq woman-manpath '("c:/dev/gnuwin32/man"
                                 ;; "c:/dev/graphviz/share/man"
                                 )
                 woman-show-log t))
          )))
    
    (eval-after-load "man"
      '(progn
         (setq Man-width 80)))
    
    (eval-after-load "tramp"
      '(progn
         (require 'tramp)
         (cond
          (win32p
           (setq ange-ftp-ftp-program-name "c:/dev/emacs/emacsw32/gnuwin32/bin/ftp.exe")
           )
          )
         ))
    
    (eval-after-load "dired"
      '(progn
         (define-key dired-mode-map (kbd "C-s") 'dired-isearch-filenames) ;; 'dired-isearch-forward)
         (define-key dired-mode-map (kbd "C-r") 'dired-isearch-backward)
         (define-key dired-mode-map (kbd "ESC C-s") 'dired-isearch-filenames-regexp)
         (define-key dired-mode-map (kbd "ESC C-r") 'dired-isearch-backward-regexp)))
    
    (eval-after-load "ace-jump-mode"
      '(progn
         ;; (define-key global-map (kbd "C-c C-SPC") 'ace-jump-mode)
         ;; (define-key global-map (kbd "C-=") 'ace-jump-mode)
         (define-key global-map (kbd "C-'") 'ace-jump-mode)
         (define-key global-map (kbd "M-g l") 'ace-jump-line-mode)
         )
      )
    
    ;; mark-more-like-this : "mark-multiple" package.
    ;; from https://github.com/magnars/mark-multiple.el
    (when (my-try-require 'inline-string-rectangle)
      (global-set-key (kbd "C-x r t") 'inline-string-rectangle)
      )
    ;; (when (my-try-require 'mark-more-like-this)
    ;;   (global-set-key (kbd "C-<") 'mark-previous-like-this)
    ;;   (global-set-key (kbd "C->") 'mark-next-like-this)
    ;;   ;; like the other two, but takes an argument (negative is previous)
    ;;   (global-set-key (kbd "C-M-m") 'mark-more-like-this) 
    ;;   (global-set-key (kbd "C-*") 'mark-all-like-this)
    ;;   )
    (when (my-try-require 'multiple-cursors)
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-c C-<return>") 'mc/edit-lines)
      (global-set-key (kbd "C-c C-;") 'mc/mark-all-like-this)
      )
    
    (when (my-try-require 'rename-sgml-tag)
      (eval-after-load "sgml-mode"
        '(progn
           (define-key sgml-mode-map (kbd "C-c C-r") 'rename-sgml-tag)
           ))
      )
    (when (my-try-require 'js2-rename-var)
      (define-key js2-mode-map (kbd "C-c C-r") 'js2-rename-var)
      )
    
    ;; expand-region
    (when (my-try-require 'expand-region)
      (global-set-key (kbd "C-M-SPC") 'er/expand-region)
      )
    ;; (when (my-try-require 'expand-region-core)
    ;;   ;; hack original code
    ;;   (defun er/mark-outside-pairs ()
    ;;  "Mark pairs (as defined by the mode), including the pair chars."
    ;;  (interactive)
    ;;  (cond
    ;;   ((looking-at "[ ]*[({]")
    ;;    ;; do nothing ?!
    ;;    t)
    ;;   ((looking-back "\\s)+\\=")
    ;;    (ignore-errors (backward-list 1)))
    ;;   (t
    ;;       (skip-chars-forward er--space-str))
    ;;   )
    ;;  (when (and (er--point-inside-pairs-p)
    ;;             (or (not (er--looking-at-pair))
    ;;                 (er--looking-at-marked-pair)))
    ;;    (goto-char (nth 1 (syntax-ppss))))
    ;;  (when (er--looking-at-pair)
    ;;    (set-mark (point))
    ;;    (forward-list)
    ;;    (exchange-point-and-mark)))
    ;;   )
    
    (when (my-try-require 'miniedit)
      (miniedit-install)
      )
    
    (when (my-try-require 'iedit)
      )
    
    (when (my-try-require 'undo-tree)
      (global-undo-tree-mode 1)
      )
    
    (when (my-try-require 'iflipb)
      ;; wrap is better?! trying..
      (setq iflipb-wrap-around t)
      ;; auto off function iflipb'ing
      (setq my-iflipb-auto-off-timeout-sec 1)
      (setq my-iflipb-auto-off-timer-canceler-internal nil)
      (setq my-iflipb-ing-internal nil)
      (defun my-iflipb-auto-off ()
        (message nil)
        (setq my-iflipb-auto-off-timer-canceler-internal nil
              my-iflipb-ing-internal nil)
        )
      (defun my-iflipb-next-buffer (arg)
        (interactive "P")
        (iflipb-next-buffer arg)
        (if my-iflipb-auto-off-timer-canceler-internal
            (cancel-timer my-iflipb-auto-off-timer-canceler-internal))
        (run-with-idle-timer my-iflipb-auto-off-timeout-sec 0 'my-iflipb-auto-off)
        (setq my-iflipb-ing-internal t)
        )
      (defun my-iflipb-previous-buffer ()
        (interactive)
        (iflipb-previous-buffer)
        (if my-iflipb-auto-off-timer-canceler-internal
            (cancel-timer my-iflipb-auto-off-timer-canceler-internal))
        (run-with-idle-timer my-iflipb-auto-off-timeout-sec 0 'my-iflipb-auto-off)
        (setq my-iflipb-ing-internal t)
        )
      (global-set-key (kbd "<C-tab>") 'my-iflipb-next-buffer)
      (global-set-key (kbd "<C-S-tab>") 'my-iflipb-previous-buffer)
      (defun iflipb-first-iflipb-buffer-switch-command ()
        "Determines whether this is the first invocation of
    iflipb-next-buffer or iflipb-previous-buffer this round."
        (not (and (or (eq last-command 'my-iflipb-next-buffer)
                      (eq last-command 'my-iflipb-previous-buffer))
                  my-iflipb-ing-internal)))
      )
    
    (when (my-try-require 'warp)
      (global-set-key (kbd "C-c C-w C-w") 'warp-mode) ;; Modify key bind as you want.
      (setq warp-server-command "warp"
            warp-node-js-program "c:/program files/nodejs/node.exe"
            warp-server-command-args '("c:/Users/jhlee/elisp/alien/el-get-package/warp/warp"))
      ;; Set markdown converter (if you want)
      (add-to-list 'warp-format-converter-alist
                   '("\\.md\\|\\.markdown" t (lambda ()
                                               ;; Set command you are using
                                               '("markdown"))))
    
      ;; Below line is needed if you installed websocket npm module globally.
      (setenv "NODE_PATH" "c:/Program Files/nodejs/node_modules/websocket")
      ;; ;; or, if you have setup NODE_PATH in the shell
      ;; (setenv "NODE_PATH"
      ;;          (replace-regexp-in-string
      ;;           "\n+$" "" (shell-command-to-string "echo $NODE_PATH")))
      )
    
    (if win32p
        (when (my-try-require 'everything)
          (setq everything-port 18000)
          )
      )
    ;; activate disabled features
    (put 'narrow-to-region 'disabled nil)
    (put 'downcase-region 'disabled nil)
    (put 'upcase-region 'disabled nil)
    
    ;; move will banish if cursor is over there...
    (mouse-avoidance-mode 'exile)
    (setq mouse-avoidance-nudge-dist 50)
    (defun mouse-avoidance-banish-destination()
      (cons -5 -20))
    
    ;; sometimes... some mode(ie. *Help*) display shows ^M
    ;; http://stackoverflow.com/questions/730751/hiding-m-in-emacs
    (defun my-remove-dos-eol ()
      "Do not show ^M in files containing mixed UNIX and DOS line endings."
      (interactive)
      (setq buffer-display-table (make-display-table))
      (aset buffer-display-table ?\^M []))
    (add-hook 'help-mode-hook 'my-remove-dos-eol)
    
    ;; http://stackoverflow.com/questions/251908/how-can-i-insert-current-date-and-time-into-a-file-using-emacs
    ;; insert date and time
    (defvar my-current-date-time-format "%Y/%m/%d-%H:%M:%S" ;; "%a %b %d %H:%M:%S %Z %Y" "%a %b %d %H:%M:%S %Z %Y"
      "Format of date to insert with `my-insert-current-date-time' func
    See help of `format-time-string' for possible replacements")
    (defvar my-current-time-format "%a %H:%M:%S"
      "Format of date to insert with `my-insert-current-time' func.
    Note the weekly scope of the command's precision.")
    (defun my-insert-current-date-time ()
      "insert the current date and time into current buffer.
    Uses `my-current-date-time-format' for the formatting the date/time."
      (interactive)
      ;; (insert "==========\n")
      ;; (insert (let () (comment-start)))
      (insert (format-time-string my-current-date-time-format (current-time)))
      ;; (insert "\n")
      )
    (defun my-insert-current-time ()
      "insert the current time (1-week scope) into the current buffer."
      (interactive)
      (insert (format-time-string my-current-time-format (current-time)))
      (insert "\n")
      )
    (global-set-key (kbd "C-c i t") 'my-insert-current-date-time)
    
    ;; hint from http://emacs.wordpress.com/2007/01/16/quick-and-dirty-code-folding/
    (defun my-toggle-selective-display ()
      (interactive)
      (set-selective-display (if selective-display nil 1)))
    (global-set-key [f1] 'my-toggle-selective-display)
    
    ;; make it damm hard key for hideshow easy
    (eval-after-load "hideshow"
      '(progn
         (global-set-key (kbd "M-<left>") 'hs-hide-block)
         (global-set-key (kbd "M-<right>") 'hs-show-block)
         (global-set-key (kbd "M-S-<left>") 'hs-hide-all)
         (global-set-key (kbd "M-S-<right>") 'hs-show-all)
         )
      )
    
    (defun my-easy-other-window (inc)
      "easy other-window"
      (interactive "p")
      (let ((first t)
            (keep-going t)
            (other-window-step 1)
            (ev last-command-event)
            (echo-keystrokes nil))
        (while keep-going
          (let ((base (event-basic-type ev)))
            (cond ((or first (eq base ?o))
                   (setq keep-going t
                         other-window-step 1))
                  ((eq base ?i)
                   (setq keep-going t
                         other-window-step -1))
                  (t
                   (setq keep-going nil))))
          (setq first nil)
          (when keep-going
            (other-window other-window-step)
            (setq ev (read-event "o=next i=prev: other window"))))
        (push ev unread-command-events)))
    (global-set-key (kbd "C-x o") 'my-easy-other-window)
    
    (defun my-easy-find-file (&optional arg)
      "Like `ido-find-file, but automatically edit the file with root(sudo) if needed"
      (interactive "P")
      (if arg
          (let ((file (ido-read-file-name "Edit as root: ")))
            (unless (file-writable-p file)
              (setq file (concat "/sudo:root@localhost:" file))
              (find-file file)))
        (ido-find-file)))
    (unless win32p
      (global-set-key (kbd "C-x C-f") 'my-easy-find-file))
    
    
    ;; hint from http://whattheemacsd.com//key-bindings.el-03.html
    ;; 눌러보면 알게될 한줄합치기.
    (global-set-key (kbd "M-]") (lambda () (interactive) (join-line -1)))
    (global-set-key (kbd "M-[") 'join-line)
    ;; Move more quickly
    (global-set-key (kbd "C-S-n") (lambda () (interactive) (ignore-errors (next-line 5))))
    (global-set-key (kbd "C-S-p") (lambda () (interactive) (ignore-errors (previous-line 5)))) 
    (global-set-key (kbd "C-S-f") (lambda () (interactive) (ignore-errors (forward-char 5))))
    (global-set-key (kbd "C-S-b") (lambda () (interactive) (ignore-errors (backward-char 5))))
    
    ;;
    ;; joon customized editing feature
    ;;
    (defun my/kill-and-reopen-buffer ()
      (interactive)
      (let ((buf-file (buffer-file-name)))
        (when (stringp buf-file)
          (kill-buffer)
          (find-file buf-file))
        )
      )
    (progn
      (global-set-key (kbd "C-c r b") 'rename-buffer)
      (global-set-key (kbd "C-c e b") 'ediff-buffers)
      (global-set-key (kbd "C-c e r") 'ediff-revision)
      (global-set-key (kbd "C-c m t") '(lambda() (interactive)(move-to-window-line 0)))
      (global-set-key (kbd "C-c m b") '(lambda() (interactive)(move-to-window-line -1)))
      (global-set-key (kbd "<f1>") (lambda  () (interactive) (manual-entry (current-word))))
      (global-set-key (kbd "C-c t l") 'toggle-truncate-lines)
      (global-set-key (kbd "C-c s <RET>") 'server-start)
      (global-set-key (kbd "C-c f f") 'font-lock-fontify-buffer)
      (global-set-key (kbd "C-c r r") 'my/kill-and-reopen-buffer)
      ;; goto the source that defines that function
      (global-set-key (kbd "C-h C-f") 'find-function)
      )
  #+END_SRC

  ido

  #+BEGIN_SRC emacs-lisp
    (require 'filecache)
    (require 'ido)
    
    (setq
     ido-enable-flex-matching t
     ido-everywhere t
     ido-auto-merge-delay-time 1.2 ;; little more time for me to input new file path
     )
    (ido-mode 1)
    
    (when (my-try-require 'ido-ubiquitous)
      (ido-ubiquitous-mode 1))
    
    (defun my-ido-find-file-in-tag-files ()
      (interactive)
      (save-excursion
        (let ((enable-recursive-minibuffers t))
          (visit-tags-table-buffer))
        (find-file
         (expand-file-name
          (ido-completing-read
           "Project file: " (tags-table-files) nil t)))))
    
    (require 'smex)
    (smex-initialize)
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)
    ;; This is your old M-x.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
  #+END_SRC

** Non-C/C++ Programming Modes

   #+BEGIN_SRC emacs-lisp
     ;; dsvn(equivalent to tortoisesvn)
     ;;
     ;; (require 'vc-svn)
     
     ;; template
     (setq-default template-default-directories `(,(concat my-dotfiles-dir "template")))
     (require 'template)
     (template-initialize)
     
     ;; idutils
     (autoload 'gid "idutils" "run idutils' gid command" t)
     
     ;;
     ;; vc
     ;;
     (if win32p
         (cond
          ((file-exists-p "c:/Program Files (x86)/Git/bin/git.exe")
           (setq vc-git-program "c:/Program Files (x86)/Git/bin/git.exe"))
          ((file-exists-p "c:/Program Files/Git/bin/git.exe")
           (setq vc-git-program "c:/Program Files (x86)/Git/bin/git.exe"))
          )
       )
     
     ;;
     ;; magit
     ;;
     (global-set-key (kbd "C-x g") 'magit-status)
     ;; unable to detect end of process in magit process buffer?!
     ;; discussion found https://github.com/magit/magit/issues/18
     ;; but no help. :(
     ;; (setq magit-process-connection-type nil)
     (if win32p
         (setq magit-git-executable
               (cond
                ((file-exists-p "c:/Program Files/Git/bin/git.exe")
                 "c:/program files/git/bin/git.exe")
                ((file-exists-p "c:/Program Files (x86)/Git/bin/git.exe")
                 "c:/Program Files (x86)/Git/bin/git.exe")
                (t
                 "git"))))
     
     ;;
     ;; emacs lisp
     ;;
     (my-try-require 'rainbow-delimiters)
     (require 'eldoc)
     (add-hook 'emacs-lisp-mode-hook
               '(lambda ()
                  (interactive)
                  (turn-on-eldoc-mode)
                  (if (featurep 'rainbow-delimiters)
                      (rainbow-delimiters-mode t)
                    )
                  ))
     
     ;;
     ;; auto-complete mode
     ;;
     ;; (eval-after-load "auto-complete"
     ;;   '(progn
     ;;   (setq ac-auto-start nil)))
     (when (my-try-require 'auto-complete)
       (setq
        ;; 숫자면 해당 숫자 길이 이상의 문자 입력하면 바로 ac시작
        ac-auto-start 2
        ac-trigger-key "TAB"
        ac-use-menu-map t
        ac-quick-help-limit 1.0
        )
       ;; http://blog.iany.me/2012/03/fix-tab-binding-for-yasnippet-and-auto-complete/
       (defun my-tab-noconflict ()
         (let ((command (key-binding [tab]))) ; remember command
           (local-unset-key [tab]) ; unset from (kbd "<tab>")
           (local-set-key (kbd "TAB") command))) ; bind to (kbd "TAB")
       ;; (add-hook 'ruby-mode-hook 'my-tab-noconflict)
       (add-hook 'markdown-mode-hook 'my-tab-noconflict)
       (add-hook 'orgg-mode-hook 'my-tab-noconflict)
       (add-to-list
        'ac-dictionary-directories
        "~/elisp/alien/el-get-package/auto-complete/dict")
     
       (when (my-try-require 'auto-complete-config)
         (setq ac-sources '(
                            ac-source-words-in-same-mode-buffers
                            ac-source-yasnippet
                            ac-source-abbrev
                            ac-source-dictionary
                            ))
         (ac-config-default)
         (add-to-list 'ac-modes 'objc-mode)
         )
     
       (setq my-use-clang-complete nil)
       (when (and my-use-clang-complete  (my-try-require 'auto-complete-clang-async))
         (defun my-ac-cc-clang-completion-mode-setup ()
           (setq ac-clang-complete-executable "c:/prj/oss/mine/emacs-clang-complete-async/build/Debug/clang-complete.exe")
           (setq ac-sources '(ac-source-clang-async))
           (ac-clang-launch-completion-process)
           )
         (progn
           (add-hook 'c-mode-common-hook 'my-ac-cc-clang-completion-mode-setup)
           (add-hook 'auto-complete-mode-hook 'ac-common-setup)
           (global-auto-complete-mode t)
           )
         )
       )
     
     ;;
     ;; dash-at-point
     ;;
     (when macp
       (when (my-try-require 'dash-at-point) 
         (autoload 'dash-at-point "dash-at-point"
           "Search the word at point with Dash." t nil)
         (global-set-key "\C-cd" 'dash-at-point)
         )
       )
     ;;
     ;; ruby mode
     ;;
     (autoload 'ruby-mode "ruby-mode" "Major mode for ruby files" t)
     (add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
     (add-to-list 'interpreter-mode-alist '("ruby" . ruby-mode))
     
     ;;
     ;; python mode
     ;;
     (defun my-python-hook()
       (setq python-remove-cwd-from-path nil)
       )
     (add-hook 'python-mode-hook 'my-python-hook)
     
     ;;
     ;; qml-mode
     ;;
     (when (my-try-require 'qml-mode)
       (add-to-list 'auto-mode-alist '("\\.qml$" . qml-mode))
       (modify-coding-system-alist 'file "\\.qml$" 'utf-8)
       )
     
     ;;
     ;; markdown
     ;;
     (unless macp
       (progn
         (autoload 'markdown-mode "markdown-mode.el"
           "Major mode for editing Markdown files" t)
         (setq auto-mode-alist
               (cons '("README" . markdown-mode) auto-mode-alist))
         (setq auto-mode-alist
               (cons '("\\.text" . markdown-mode) auto-mode-alist))))
     
     
     ;;
     ;; Visual-Basic-Mode
     ;;
     ;; (if (and win32p officep)
     ;;     (progn
     ;;       (autoload 'visual-basic-mode "visual-basic-mode" "Visual Basic mode." t)
     ;;       (add-to-list 'auto-mode-alist '("\\.\\(vbs\\|frm\\|bas\\|cls\\)$" . visual-basic-mode) nil)
     ;;       (setq-default visual-basic-allow-single-line-if nil
     ;;          visual-basic-capitalize-keywords-p t
     ;;          visual-basic-fontify-p t
     ;;          visual-basic-ide-pathname (quote c:devvs6vb98vb6\.exe)
     ;;          visual-basic-mode-indent 4
     ;;          visual-basic-wild-files "*.frm *.bas *.cls *.vbs *.wsf *.wsc")))
     
     ;; ;;
     ;; ;; Lua Mode
     ;; ;;
     ;; (defun my-lua-mode-hook ()
     ;;   (setq indent-tabs-mode nil)
     ;;   (if (string= (file-name-extension (buffer-file-name)) "wlua")
     ;;       (set (make-local-variable 'lua-default-application) "c:\\dev\\lua\\wlua.exe")))
     ;; (setq my-lua-file-ext-regexp (regexp-opt '("wlua" "lua")))
     ;; (if t ;;(and win32p officep)
     ;;     (progn
     ;;       (autoload 'lua-mode "lua-mode" "Lua mode." t)
     ;;       (setq-default lua-default-command-switches '("-i"))
     ;;    (add-to-list 'auto-mode-alist `'(,my-lua-file-ext-regexp . lua-mode) nil)
     ;;       (setq-default lua-default-application "c:\\dev\\lua\\lua.exe")))
     ;;    ;;(setq-default lua-default-application (if win32p "c:/msys/1.0/local/bin/lua" "/home/rp)
     ;;       ;;(add-hook 'lua-mode-hook (lambda () ))
     
     ;; ediff
     (eval-after-load "ediff"
       '(progn
          (setq
           ;; ediff-window-setup-function 'ediff-setup-windows-plain
           ediff-window-setup-function 'ediff-setup-windows-multiframe
           ediff-split-window-function 'split-window-horizontally
           ediff-make-buffers-readonly-at-startup t
           )
          (cond
           (win32p
            (setq ediff-diff-program "c:/dev/gnuwin32/bin/diff.exe")))
          ))
     
     
     ;; compilation-mode
     (eval-after-load "compile"
       '(progn
          (defun my-compilation-setup()
            (setq
             truncate-lines nil
             compilation-scroll-output t
             compilation-window-height 15)
            )
          (add-hook 'compilation-mode-hook 'my-compilation-setup)
          ))
     
     ;;
     ;; cmake
     ;;
     (when (my-try-require 'cmake-mode)
       (require 'cmake-mode)
       (fset 'my-cmake-sort-list
             [?\M-m ?\C-  ?\C-e ?\M-w ?\C-\M-u ?\C-a ?\C-n ?\C-  ?\C-\M-u ?\C-\M-n ?\C-p ?\C-e ?\M-x ?s ?o ?r ?t ?- ?l ?i ?n ?e ?s return ?\C-\M-u ?\C-s ?\M-e ?\C-y return ?\C-e])
       (defun my-cmake-mode-hook ()
         (subword-mode 1)
         (local-set-key (kbd "C-c . r") 'cmake-command-run)
         (local-set-key (kbd "C-c . h") 'cmake-help-list-commands)
         (local-set-key (kbd "C-c . t") 'cmake-get-topic)
         (local-set-key (kbd "C-c . u") 'unscreamify-cmake-buffer)
         (local-set-key (kbd "C-c . s") 'my-cmake-sort-list)
         )
       (setq auto-mode-alist
             (append '(
                       ("CMakeLists\\.txt\\'" . cmake-mode)
                       ("\\.cmake\\'" . cmake-mode)
                       )
                     auto-mode-alist))
       (add-hook 'cmake-mode-hook 'my-cmake-mode-hook)
       )
     
     ;;
     ;; eshell
     ;;
     (if win32p
         (defun eshell/op (FILE)
           "Invoke (w32-shell-execute \"Open\" FILE) and substitute slashes for backslashes.
        i.e: c:/home $ op test.xls ==> open test.xls in excel!!!"
           (w32-shell-execute "Open" (substitute ?\\ ?/ (expand-file-name FILE)))))
     
     ;;
     ;; graphviz
     ;;
     (eval-after-load "graphviz-dot-mode"
       '(progn
          (cond
           ((and win32p officep)
            (progn
              (setq
               graphviz-dot-dot-program "c:\\dev\\graphviz\\bin\\dot.exe"
               graphviz-dot-indent-width 4
               graphviz-dot-preview-extension "gif"
               ))))))
     
     ;;;; flymake
     ;;
     ;; 이상하게 어떤 모드는 flymake를 require 하지 않으면 오류가 난다.
     ;; 어디서 나는지 알면 아래 require는 제거해도 된다.
     (require 'flymake)
                                             ;
     (eval-after-load "flymake"
       '(progn
          (setq
           ;; i hate gui style warning
           flymake-gui-warnings-enabled nil
           ;; -1 = NONE, 0 = ERROR, 1 = WARNING, 2 = INFO, 3 = DEBUG
           flymake-log-level 0
           flymake-allowed-file-name-masks '(;; ("^\\.emacs$" flymake-for-el-init)
                                             ;; (".+\\.el$" flymake-for-el-init)
                                             ;; ("\\.py\\'" flymake-pyflakes-init)
                                             ;; (".+\\.scss$" flymake-scss-init)
                                             ;; ("\\.\\(?:c\\(?:pp\\|xx\\|\\+\\+\\)?\\|CC\\)\\'" flymake-simple-make-init)
                                             ;; ("\\.xml\\'" flymake-xml-init)
                                             ;; ("\\.html?\\'" flymake-xml-init)
                                             ;; ("\\.cs\\'" flymake-simple-make-init)
                                             ;; ("\\.p[ml]\\'" flymake-perl-init)
                                             ;; ("\\.php[345]?\\'" flymake-php-init)
                                             ;; ("\\.h\\'" flymake-master-make-header-init flymake-master-cleanup)
                                             ;; ("\\.java\\'" flymake-simple-make-java-init flymake-simple-java-cleanup)
                                             ;; ("[0-9]+\\.tex\\'" flymake-master-tex-init flymake-master-cleanup)
                                             ;; ("\\.tex\\'" flymake-simple-tex-init)
                                             ;; ("\\.idl\\'" flymake-simple-make-init)
                                             )
           )))
     
     ;;
     ;; plantuml
     ;;
     (eval-after-load "plantuml"
       (progn
         (setq
          plantuml-jar-path (cond
                             (win32p
                              (cond
                               ((file-exists-p "c:/dev/plantuml/plantuml.jar")
                                "c:/dev/plantuml/plantuml.jar")
                               ((file-exists-p "c:/dev/utility/plantuml.jar")
                                "c:/dev/utility/plantuml.jar")
                               ))
                             (t "~/scripts/plantuml.jar"))
          )
         )
       )
     
     ;;
     ;; matlab
     ;;
     (autoload 'matlab-mode "matlab" "Enter Matlab mode." t)
     (setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
     (autoload 'matlab-shell "matlab" "Interactive Matlab mode." t)
     
     ;;
     ;; protobuf mode
     ;;
     (when (my-try-require 'protobuf-mode)
       (add-to-list 'auto-mode-alist '("\\.proto\\'" . protobuf-mode))
       )
     
     (when (featurep 'eproject)
       (setq
        ;; do not rename buffer to its relative path. too long to see in mode line!
        prj-rename-buffers nil
        ;; do not add/remove too intelligent. :(
        prj-autotracking nil
        )
       (global-set-key (kbd "C-c C-f") 'eproject-visitfile)
       )
     
     (when (my-try-require 'projectile)
       (require 'my-projectile)
       )
     
     (when (my-try-require 'qt-pro)
       (add-to-list 'auto-mode-alist '("\\.pr[io]$" . qt-pro-mode)))
     
   #+END_SRC

** C/C++ Programming Modes

   #+BEGIN_SRC emacs-lisp
     (require 'cc-mode)
     (require 'cc-vars)
     
     (when (my-try-require 'cmake-project)
       (setq cmake-project-default-build-dir-name "build/")
       (defun my-maybe-cmake-project-hook ()
         (if (file-exists-p "CMakeLists.txt")
             (cmake-project-mode)))
       )
     
     ;; order of cdr list is IMPORTANT!  (for example, when
     ;; 'ff-find-other-file' failed it would ask user the default file name
     ;; with the extension which is car of this list!)
     (setq cc-other-file-alist
           '(("\\.cc\\'"
              (".hh" ".h"))
             ("\\.hh\\'"
              (".cc" ".C"))
             ("\\.c\\'"
              (".h"))
             ("\\.h\\'"
              (".cpp" ".cxx" ".C" ".CC" ".c" ".cc" ".m" ".mm" "_win32.cpp" ))
             ("\\.C\\'"
              (".H" ".hh" ".h"))
             ("\\.H\\'"
              (".C" ".CC"))
             ("\\.CC\\'"
              (".HH" ".H" ".hh" ".h"))
             ("\\.HH\\'"
              (".CC"))
             ("\\.c\\+\\+\\'"
              (".h++" ".hh" ".h"))
             ("\\.h\\+\\+\\'"
              (".c++"))
             ("\\.cpp\\'"
              (".hpp" ".hh" ".h" ".hxx"))
             ("\\.hpp\\'"
              (".cpp"))
             ("\\.cxx\\'"
              (".hxx" ".hh" ".h"))
             ("\\.hxx\\'"
              (".cxx" ".cpp"))
             ("\\.m[m]*"
              (".h"))
             ))
     (setq cc-search-directories
           '(
             "."
             "../include"
             "../src"
             "../source"
             ".."
             "../../framework"
             "../../common"
             "c:/qt/4.8.1/include/Qt"
             "c:/qt/4.8.1/include"
             "c:/dev/gnuwin32/include"
             ))
     
     ;; when opening a header like the one in stl
     (add-to-list 'magic-fallback-mode-alist
                  '("[.*]*#include[ ]*\"" . c++-mode))
     
     (mapcar (lambda(elem)
               (add-to-list 'c++-font-lock-extra-types elem))
             '(
               ;; "\\b[_Q]*ASSERT[a-zA-Z_]*\\b"
               "\\bWp[:alnum:]*\\b"
               "\\Q[:alnum:]*\\b"
               ))
     
     ;;
     ;; Customizations for all modes in CC Mode.
     ;;
     ;; TODO : use 'regexp-opt'
     ;; wxXXX / Qt class name in wxWidgets
     (add-to-list 'c++-font-lock-extra-types
                  "\\b\\(wx\\|Q[t]*\\)[A-Z][a-z][a-zA-Z]*?\\b")
     
     (defun my-c-lineup-topmost-intro-cont(langelm)
       (save-excursion
         (back-to-indentation)
         (cond
          ((looking-at "\\:")
           '+)
          (t
           (progn
             (beginning-of-line)
             (cond
              ((re-search-forward
                (regexp-opt '("EVT_"
                              "ON_"
                              ))
                (line-end-position) t)
               'c-basic-offset)
              ((re-search-forward 
                (regexp-opt '("DEFINE"
                              "template"
                              "END_"
                              "IMPLEMENT"
                              "DECLARE"
                              "MAP_PROPERTY"))
                (line-end-position) t)
               0)
              ((save-excursion
                 (c-backward-syntactic-ws (c-langelem-pos langelm))
                 (re-search-backward
                  (regexp-opt '("BEGIN_STATE"))
                  (line-beginning-position) t)
                 )
               'c-basic-offset
               )
              (t
               (c-lineup-topmost-intro-cont langelm))))))))
     
     ;; (font-lock-add-keywords
     ;;  'c++-mode
     ;;  '(((regexp-opt '("foreach" "emit" "Q_ASSERT")) . font-lock-keyword-face)))
     
     
     (defun my-c-lineup-statement-cont(langelm)
       (save-excursion
         (previous-line)
         (back-to-indentation)
         (cond
          ((looking-at "MAP")
           0)
          (t
           nil))))
     
     (defun my-block-close-case-align(langelm)
       (save-excursion
         (backward-list)
         (let ((syntax (car (car (c-guess-basic-syntax)))))
           (if (eq syntax 'case-label)
               '+
             0))))
     
     (defun my-block-close-in-switch-case-align(langelm)
       (save-excursion
         (backward-up-list)
         (let ((syntax (car (car (c-guess-basic-syntax)))))
           (if (eq syntax 'case-label)
               '+
             0))))
     
     (defun my-file-containig-signature-exist-p (dir file-pattern-regexp signature-regexp)
       (let ((found-file-list (directory-files-and-attributes
                               dir
                               t
                               file-pattern-regexp))
             (exist nil))
         (while (and (not exist)
                     found-file-list)
           (with-temp-buffer
             (erase-buffer)
             (beginning-of-buffer)
             (insert-file-contents (caar found-file-list))
             (if (search-forward-regexp signature-regexp nil t)
                 (setq exist t))
             (setq found-file-list (cdr found-file-list))))
         exist))
     
     ;;
     ;; compile mode
     ;;
     (require 'compile)
     (defun my-recommend-compile-command(&optional arg)
       (let* ((my-buffer (current-buffer))
              (srcname (file-name-nondirectory buffer-file-name))
              (srctitle (file-name-sans-extension srcname))
              (srcext (file-name-extension buffer-file-name))
              (dirname (file-name-directory buffer-file-name))
              (targetname nil)
              (makeprog "make"))
         (unless (null arg)
           (cond
            ((member major-mode '(c++-mode cc-mode))
             (setq targetname (concat srctitle ".o")))))
         ;; (if (string-match "/vobs" dirname)
         ;;     (setq makeprog "pbuild"))
         (concat
          (cond
           ;; when there is makefile in this dir..
           ((or (file-exists-p "Makefile")
                (file-exists-p "makefile"))
            "make")
           ;; when there is *.mak and it is Borland C++ Builder's make file..
           ((my-file-containig-signature-exist-p
             dirname
             "\\.mak$"
             "BCB IDE")
            (unless (null arg)
              (setq targetname (concat srctitle ".obj")))
            "bmake")
           ;; file is header but if makefile is in ../src fortunately...
           ((and (string-match "\\.h\\(\\(h\\)\\|\\(pp\\)\\)?$" srcname)
                 (or (file-exists-p (concat dirname "../src/Makefile"))
                     (file-exists-p (concat dirname "../src/makefile"))))
            (concat "pushd ../src; " makeprog))
           ;; no makefile but file is c++ source
           ((string-match "\\.c\\(\\(c\\)\\|\\(pp\\)\\)$" srcname)
            (if win32p
                (format "gcc -o %s %s %s" srctitle "-g" srcname)
              (format "CC -o %s %s %s" srctitle "-g -mt -D_REENTRANT" srcname)))
           ;; no makefile but file is c source
           ((string-match "\\.c$" srcname)
            (if win32p
                (format "gcc -o %s %s %s" srctitle "-g" srcname)
              (format "cc -o %s %s %s" srctitle "-g -mt -D_REENTRANT" srcname)))
           ;; unexpected case
           (t "echo unknown compilation case!"))
          (if targetname (concat " " targetname)))
         ))
     (setq my-compile-key
           '((",c" . compile)
             (",r" . recompile)))
     (dolist (joonkey my-compile-key)
       (define-key mode-specific-map (car joonkey) (cdr joonkey)))
     
     ;;
     ;; style
     ;;
     (c-add-style
      "mystyle"
      '("stroustrup"
        ;; other could use tab :(
        (indent-tabs-mode . t)
        (c-basic-offset . 4)
        (tab-width . 4) ;;necessary setq!!!
        (c-cleanup-list . (brace-else-brace
                           brace-elseif-brace
                           brace-catch-brace
                           ;; empty-defun-braces
                           defun-close-semi
                           scope-operator
                           ))
        (c-hanging-braces-alist
         . (
            (defun-open after)
            (defun-close before after)
            (class-open after)
            (class-close before after)
            (namespace-open after)
            (inline-open after)
            (inline-close before after)
            (block-open after)
            (block-close . c-snug-do-while)
            (extern-lang-open after)
            (extern-lang-close after)
            (statement-case-open after)
            (substatement-open after)
            ))
        (c-hanging-colons-alist
         . (
            (case-label)
            (label after)
            (access-label after)
            (member-init-intro before)
            (inher-intro)
            ))
        (c-hanging-semi&comma-criteria
         ;; following order is important
         . (c-semi&comma-no-newlines-before-nonblanks
            c-semi&comma-no-newlines-for-oneline-inliners
            c-semi&comma-inside-parenlist
            ))
        (c-offsets-alist
         . ((arglist-intro . ++)
            (comment-intro . 0)
            (inher-cont . c-lineup-multi-inher)
            (inline-open . 0)
            (innamespace . -)
            (label . 0)
            (member-init-intro . +)
            (statement-case-open . +)
            (statement-case-open . +)
            (statement-cont . (my-c-lineup-statement-cont c-lineup-math))
            (substatement-open . 0)
            (template-args-cont . +)
            (topmost-intro-cont . my-c-lineup-topmost-intro-cont)
            ;; (block-close . my-block-close-case-align)
            (block-close . 0)
            ;; (statement-block-intro . my-block-close-in-switch-case-align)
            (statement-block-intro . +)
            (statement-case-intro . +)
            ))
        ))
     
     (defun my-c-electric-paren (arg)
       "Hack original `c-electric-paren'"
       (interactive "*P")
       (let ((literal (c-save-buffer-state () (c-in-literal)))
             ;; shut this up
             (c-echo-syntactic-information-p nil))
         (self-insert-command (prefix-numeric-value arg))
     
         (if (and (not arg) (not literal))
             (let* ( ;; We want to inhibit blinking the paren since this will
                    ;; be most disruptive.  We'll blink it ourselves
                    ;; afterwards.
                    (old-blink-paren blink-paren-function)
                    blink-paren-function)
               (if (and c-syntactic-indentation c-electric-flag)
                   (indent-according-to-mode))
     
               ;; If we're at EOL, check for new-line clean-ups.
               (when (and c-electric-flag c-auto-newline
                          (looking-at "[ \t]*\\\\?$"))
     
                 ;; clean up brace-elseif-brace
                 (when
                     (and (memq 'brace-elseif-brace c-cleanup-list)
                          (eq last-command-event ?\()
                          (re-search-backward
                           (concat "}"
                                   "\\([ \t\n]\\|\\\\\n\\)*"
                                   "else"
                                   "\\([ \t\n]\\|\\\\\n\\)+"
                                   "if"
                                   "\\([ \t\n]\\|\\\\\n\\)*"
                                   "("
                                   "\\=")
                           nil t)
                          (not  (c-save-buffer-state () (c-in-literal))))
                   (delete-region (match-beginning 0) (match-end 0))
                   (insert-and-inherit "} else if ("))
     
                 ;; clean up brace-catch-brace
                 (when
                     (and (memq 'brace-catch-brace c-cleanup-list)
                          (eq last-command-event ?\()
                          (re-search-backward
                           (concat "}"
                                   "\\([ \t\n]\\|\\\\\n\\)*"
                                   "catch"
                                   "\\([ \t\n]\\|\\\\\n\\)*"
                                   "("
                                   "\\=")
                           nil t)
                          (not  (c-save-buffer-state () (c-in-literal))))
                   (delete-region (match-beginning 0) (match-end 0))
                   (insert-and-inherit "} catch (")))
     
               ;; Check for clean-ups at function calls.  These two DON'T need
               ;; `c-electric-flag' or `c-syntactic-indentation' set.
               ;; Point is currently just after the inserted paren.
               (let (beg (end (1- (point))))
                 (cond
     
                  ;; space-before-funcall clean-up?
                  ((and (memq 'space-before-funcall c-cleanup-list)
                        (eq last-command-event ?\()
                        (save-excursion
                          (backward-char)
                          (skip-chars-backward " \t")
                          (setq beg (point))
                          (and (c-save-buffer-state () (c-on-identifier))
                               ;; Don't add a space into #define FOO()....
                               (not (and (c-beginning-of-macro)
                                         (c-forward-over-cpp-define-id)
                                         (eq (point) beg))))))
                   (save-excursion
                     (delete-region beg end)
                     (goto-char beg)
                     (insert ?\ )))
     
                  ;; compact-empty-funcall clean-up?
                  ((c-save-buffer-state ()
                     (and (memq 'compact-empty-funcall c-cleanup-list)
                          (eq last-command-event ?\))
                          (save-excursion
                            (c-safe (backward-char 2))
                            (when (looking-at "()")
                              (setq end (point))
                              (skip-chars-backward " \t")
                              (setq beg (point))
                              (c-on-identifier)))))
                   (delete-region beg end)))
                 ;; HACKED HERE...
                 ;; add blank between keyword (
                 (save-excursion
                   (backward-char)
                   (let ((insert-point (point)))
                     (skip-syntax-backward "w_")
                     (when (looking-at c-keywords-regexp)
                       (goto-char insert-point)
                       (insert ?\ ))
                     ))
                 )
               (and (eq last-input-event ?\))
                    (not executing-kbd-macro)
                    old-blink-paren
                    (funcall old-blink-paren))))))
     ;; (define-key c-mode-base-map "("         'my-c-electric-paren)
     
     (defun my-c-mode-common-hook ()
       (subword-mode 1)
       (c-toggle-auto-newline 1)
       (c-toggle-hungry-state 1)
       (setq show-trailing-whitespace t)
       (hs-minor-mode 1)
       (which-function-mode 1) 
       (c-set-style "mystyle" nil)
       ;; ;; TODO more reasonable way to do this?
       ;; (if debug-on-error
       ;;      (toggle-debug-on-error))
       ;; for work with auto-complete and yasnippet
       (when (boundp 'ac-sources)
         (add-to-list 'ac-sources 'ac-source-yasnippet t))
       (if (featurep 'expand-region-core)
           ;; in c++ mode i do not use er/mark-word actually.
           (set (make-local-variable 'er/try-expand-list) '(;; er/mark-word
                                                            er/mark-symbol
                                                            er/mark-symbol-with-prefix
                                                            er/mark-next-accessor
                                                            er/mark-method-call
                                                            er/mark-comment
                                                            er/mark-comment-block
                                                            er/mark-inside-quotes
                                                            er/mark-outside-quotes
                                                            er/mark-inside-pairs
                                                            er/mark-outside-pairs)))
       (if (featurep 'projectile)
           (projectile-mode 1))
       (if (featurep 'cmake-project)
           (my-maybe-cmake-project-hook))
       ;; (flymake-mode 0)
       ;; (set (make-local-variable 'compile-command)
       ;;       (my-recommend-compile-command))
       
       )
     
     (setq my-build-dir "")
     (set (make-local-variable 'my-build-dir) nil)
     (put 'my-build-dir 'disabled nil)
     
     (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
     
     ;; (add-to-list 'load-path "~/elisp/project-buffer")
     ;; (require 'sln-mode)
     ;; (autoload 'find-sln "sln-mode")
     ;; (defun dump-file-list-from-sln (sln-file)
     ;;   (cd (file-name-directory sln-file))
     ;;   (let ((sln-projects (sln-extract-projects sln-file)))
     ;;     (let ((vcproj-file (cdr (pop sln-projects))))
     ;;       (let* ((project-dir (file-name-directory vcproj-file))
     ;;       (project-data (and (file-exists-p vcproj-file)
     ;;              (vcproj-extract-data vcproj-file))))
     ;;  (when project-data
     ;;    (let ((files (vcproj-update-file-folders (caddr project-data) project-dir)))
     ;;      (while files
     ;;        (let ((file (cdr (pop files))))
     ;;      ;; (prin1 file)
     ;;      ))))))))
     
     (add-to-list 'auto-mode-alist '("\\.\\(c\\|cpp\\|cxx\\|cc\\|h\\|inl\\|hpp\\|ihh\\|hh\\)\\(\\.~[^~]+[~]?\\)?$" . c++-mode) nil)
     
     ;; *.h objc file criteria
     ;; - if there are a pair of *.h/*.m (skipped for now)
     ;; - if there is "@class" or "@interface" or "@class"
     ;; - if the directory contains xcodeproj
     ;; - if the directory contains xib
     (defun my/source-file-looks-like-objc()
       ;; (message (concat "file path : " (buffer-file-name)))
       (let* ((file-path (buffer-file-name))
              (fne (file-name-extension (if (stringp file-path) file-path "")))
              (file-ext (or (and (stringp file-path)
                                 (stringp fne)
                                 (downcase fne))
                            ""))
              )
         (and (string-match-p file-ext (regexp-opt '("h" "m")))
              (search-forward-regexp (regexp-opt '("@interface" "@class" "@implement")) 500 t 1)
              ;; (or (search-forward-regexp (regexp-opt '("@interface" "@class" "@implement")) 500 t 1)
              ;;      (directory-files (file-name-directory file-path) t (regexp-opt '("\.xib" "\.xcodeproj" "\.lproj"))))
              ))
       )
     (add-to-list 'magic-mode-alist '(my/source-file-looks-like-objc . objc-mode))
     (add-to-list 'auto-mode-alist '("\\.\\(m\\)?$" . objc-mode) nil)
     
     ;; pairing.?! cpp <--> h no matter cursor position
     (defun my-ff-find-other-file (arg)
       (interactive "P")
       (ff-find-other-file arg t))
     
     (define-key c-mode-base-map (kbd "C-m") 'newline)
     (define-key c-mode-base-map (kbd "C-<f7>") 'compile)
     (define-key c-mode-base-map (kbd "C-<f8>") 'recompile)
     (define-key c-mode-base-map (kbd "C-c h p") 'my-ff-find-other-file)
     (define-key c-mode-base-map (kbd "C-c h o") 'ff-find-other-file)
     
     ;; csharp-mode
     (when (my-try-require 'csharp-mode)
       (setq auto-mode-alist
             (append '(("\\.cs$" . csharp-mode)) auto-mode-alist))
       (defun my-csharp-mode-fn ()
         "function that runs when csharp-mode is initialized for a buffer."
         ;; (my-c-mode-common-hook)
         )
       (add-hook  'csharp-mode-hook 'my-csharp-mode-fn t)
       )
     
     
   #+END_SRC

* Dired/Shell 

  my-dired

  #+BEGIN_SRC emacs-lisp
    (require 'dired)
    (require 'dired-x)
    (require 'wdired)
    (require 'find-lisp)
    
    (when (my-try-require 'dired+)
      (toggle-diredp-find-file-reuse-dir 1)
      )
    
    (when (featurep 'magit)
      ;; magit ¿¡¼­ dired-jump ¸¦ ÇÏ°í ½Í´Ù.
      (defun my-magit-dired-jump-action-hook()
        (dired-jump)
        t)
      (setq magit-dired-jump-action-hook nil)
      (add-hook 'magit-dired-jump-action-hook 'my-magit-dired-jump-action-hook)
      )
    
    ;;
    ;; benrina wdired in normal dired mode
    ;;
    (define-key dired-mode-map "r" 'wdired-change-to-wdired-mode)
    
    ;;
    ;; ls-lisp emulation setting
    ;;
    (cond
     (win32p
      (progn
        (require 'ls-lisp)
        (setq dired-listing-switches "-alh"
              ;; ls-lisp-use-insert-directory-program nil
              ls-lisp-verbosity '('links 'uid)
              ls-lisp-ignore-case nil
              ls-lisp-use-localized-time-format t
              ls-lisp-format-time-list '("%y/%m/%d %H:%M" "%y/%m/%d %H:%M")
              ls-lisp-dirs-first t
              )
        (setq ls-lisp-emulation (quote MS-Windows))
        (ls-lisp-set-options) ;; special functionupdating parameters for ls-lisp
        ))
     (macp
      (message "macp")
      (setq
       ls-lisp-use-insert-directory-program nil
       ls-lisp-emulation 'MacOS
       ls-lisp-use-localized-time-format t
       ls-lisp-format-time-list '("%y/%m/%d %H:%M" "%y/%m/%d %H:%M")
       ls-lisp-dirs-first t
       )
      (require 'ls-lisp)
      ))
    
    (setq my-omit-extension '(".svn/" "CVS/" ".o" "~" ".bin" ".bak" ".obj" ".map" ".ico" ".pif" ".lnk" ".a" ".ln" ".blg" ".bbl" ".dll" ".drv" ".vxd" ".386" ".elc" ".lof" ".glo" ".idx" ".lot" ".dvi" ".fmt" ".tfm" ".pdf" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".fasl" ".ufsl" ".fsl" ".dxl" ".pfsl" ".dfsl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo" ".idx" ".lof" ".lot" ".glo" ".blg" ".bbl" ".cp" ".cps" ".fn" ".fns" ".ky" ".kys" ".pg" ".pgs" ".tp" ".tps" ".vr" ".vrs"))
    
    ;;
    ;; hack find-lisp-dired
    ;;
    ;; (defun my-find-lisp-format (file-name file-attr switches now)
    ;;   (let ((file-type (nth 0 file-attr)))
    ;;     (concat (if (memq ?i switches)   ; inode number
    ;;      (format "%6d " (nth 10 file-attr)))
    ;;      ;; nil is treated like "" in concat
    ;;      (if (memq ?s switches)  ; size in K
    ;;      (format "%4d " (1+ (/ (nth 7 file-attr) 1024))))
    ;;      (nth 8 file-attr)       ; permission bits
    ;;      (format " %3d %-8s %-8s %8d "
    ;;          (nth 1 file-attr)   ; no. of links
    ;;          (if (numberp (nth 2 file-attr))
    ;;          (int-to-string (nth 2 file-attr))
    ;;            (nth 2 file-attr)) ; uid
    ;;          (if (eq system-type 'ms-dos)
    ;;          "root"      ; everything is root on MSDOS.
    ;;            (if (numberp (nth 3 file-attr))
    ;;            (int-to-string (nth 3 file-attr))
    ;;          (nth 3 file-attr))) ; gid
    ;;          (nth 7 file-attr)   ; size in bytes
    ;;          )
    ;;      (find-lisp-format-time file-attr switches now)
    ;;      " "
    ;;      file-name
    ;;      (if (stringp file-type) ; is a symbolic link
    ;;      (concat " -> " file-type)
    ;;        "")
    ;;      "\n")))
    ;; (if (functionp 'find-lisp-format)
    ;;  (fset 'find-lisp-format 'my-find-lisp-format))
    ;; ;; (defun my-find-lisp-format-time (file-attr switches now)
    ;; ;;   ;; Format time string for file with attributes FILE-ATTR according
    ;; ;;   ;; to SWITCHES (a list of ls option letters of which c and u are recognized).
    ;; ;;   ;; Use the same method as `ls' to decide whether to show time-of-day or year,
    ;; ;;   ;; depending on distance between file date and NOW.
    ;; ;;   (let* ((time (nth (find-lisp-time-index switches) file-attr))
    ;; ;;    (diff16 (- (car time) (car now)))
    ;; ;;    (diff (+ (ash diff16 16) (- (car (cdr time)) (car (cdr now)))))
    ;; ;;    (past-cutoff (- (* 6 30 24 60 60)))    ; 6 30-day months
    ;; ;;    (future-cutoff (* 60 60)))     ; 1 hour
    ;; ;;     (format-time-string
    ;; ;;      "%Y/%_2m/%e %2H:%2M
    ;; ;;      time)))))
    ;; ;; (if (functionp 'find-lisp-format-time)
    ;; ;;   (fset 'find-lisp-format-time 'my-find-lisp-format-time))
    
    ;; 
    ;; dired setting
    ;;
    (setq dired-dwim-target t)
    (if win32p
        (defun my-open-in-total-cmd (dir-to-open)
          "open window in total command"
          (interactive "DDir: ")
          (let ((w32file (substitute ?\\ ?/ (expand-file-name dir-to-open))))
            (if (file-directory-p w32file)
                (shell-command (concat "c:/dev/totalcmd/totalcmd -O -L=\"" w32file "\""))))))
    
    
    
    ;;
    ;; dired-x setting
    ;;
    (dired-omit-mode nil)
    (setq
     dired-omit-files (concat dired-omit-files "\\|\\.DS_Store$\\|\\.git$")
     ;; several exceptional extension that i wanna see.
     dired-omit-extensions (remove-if
                            #'(lambda (elem)
                                (or
                                 (string-equal elem ".lib")
                                 (string-equal elem ".dll")
                                 nil)
                                )
                            dired-omit-extensions)
     )
    
    ;; from hint http://whattheemacsd.com/setup-dired.el-01.html
    ;; Make dired less verbose
    (require 'dired-details)
    (setq-default dired-details-hidden-string "--- ")
    (dired-details-install)
    
    ;; override
    ;; (define-key dired-mode-map [(meta return)] 'my-open-in-total-cmd)
    
    (defun my-dired-mode-hook ()
      ;; (dired-omit-mode 1)
      (subword-mode 1)
      )
    
    (add-hook 'dired-mode-hook 'my-dired-mode-hook)
    
  #+END_SRC

  my-shell

  #+BEGIN_SRC emacs-lisp
    ;; hint from http://whattheemacsd.com/setup-shell.el-01.html
    (defun comint-delchar-or-eof-or-kill-buffer (arg)
      (interactive "p")
      (if (null (get-buffer-process (current-buffer)))
          (kill-buffer)
        (comint-delchar-or-maybe-eof arg)))
    
    (add-hook 'shell-mode-hook
              (lambda ()
                ))
    
    (defun my-get-existing-shell-buffer ()
      (let (proc proc-buffer)
        (catch 'break
          (dolist (proc (process-list))
            (if (string= (process-name proc) "shell")
                (throw 'break (setq proc-buffer (process-buffer proc))))))
        ))
    
    (defun my-shell-with-current-directory (&optional arg)
      (interactive "P")
      (let* ((sp (get-process "shell"))
             (spbuf (and sp (process-buffer sp)))
             (dir (if buffer-file-name (file-name-directory buffer-file-name) default-directory)))
        (if (and sp spbuf dir)
            (progn
              (when arg
                (comint-simple-send sp (concat "cd /d " dir))
                (save-excursion
                  (set-buffer spbuf)
                  (cd dir)
                  )
                )
              (display-buffer spbuf)
              )
          (progn
            (shell)
            (comint-simple-send sp "setlocal enableextensions")
            )
          )
        )
      )
    
    (cond
     (win32p
      (global-set-key "\C-z" 'my-shell-with-current-directory)
      )
     (
      (global-set-key "\C-z" 'shell)
      ))
    
    ;; great hint from
    ;; http://whattheemacsd.com//setup-dired.el-02.html
    (defun dired-back-to-top ()
      (interactive)
      (beginning-of-buffer)
      (dired-next-line 4))
    
    (define-key dired-mode-map
      (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
    
    (defun dired-jump-to-bottom ()
      (interactive)
      (end-of-buffer)
      (dired-next-line -1))
    
    (define-key dired-mode-map
      (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
    ;; http://whattheemacsd.com//setup-dired.el-02.html
    
    
    (defun my-shell-setup()
      (dirtrack-mode t)
      (ansi-color-for-comint-mode-on)
      (setq
       ;; comint-prompt-read-only t
       comint-process-echoes t
       )
      (if win32p
          (setq shell-cd-regexp "\\(cd\\)\\|\\(cd /d\\)"))
      ;; hint from http://whattheemacsd.com/setup-shell.el-01.html
      (define-key shell-mode-map (kbd "C-d") 'comint-delchar-or-eof-or-kill-buffer)
      )
    
    (add-hook 'shell-mode-hook 'my-shell-setup)
  #+END_SRC
* Grep/ISearch/IDo
** grep

  #+BEGIN_SRC emacs-lisp
    (when win32p
      (eval-after-load "full-ack"
        (progn
          (setq ack-executable "c:/dev/scripts/ack.cmd")
          ;; (setq ack-arguments '("--nogroup" "--nopager"))
          (setq
           ack-heading nil
           ack-context 0
           )
          )
        ))
    
    (setq  grep-files-aliases
           '(("el" . "*.el")
             ("cpp" . "*.cc *.cpp *.c *.h *.hh *.hpp *.ihh *.inl *.cxx *.hxx *.m")
             ("src" . "*.cc *.cpp *.c")
             ("inc" . "*.h *.hh *.hpp *.ihh *.inl")
             ("ch" . "*.[ch]")
             ("c" . "*.c")
             ("h" . "*.h")
             ("asm" . "*.[sS]")
             ("m" . "[Mm]akefile*")
             ("l" . "[Cc]hange[Ll]og*")
             )
           grep-find-ignored-directories '
           ("CVS" "OBSOLETE" ".OBSOLETE" "{arch}"
            "lost+found" "tmp"
            "release" "releaseAC" "releaseAS"
            "pdi_spec_lib" "vnc" "kernel"
            "doc" "mpsSamples" "mpsSystem"
            "3rd_party" "pfeSystem")
           ;;
           ;; @NOTE : following routine shouldn't be included.
           ;;         More than often, (grep-compute-defaults) will do
           ;;grep-use-null-device nil
           ;;grep-find-template "find . <X> -type f <F> -print0 | xargs -0 -e grep <C> -nH -e <R>"
           ;;grep-find-command "find . -type f -print0 | xargs -0 -e grep -nH -e "
           ;;grep-find-use-xargs 'gnu)
           ;;grep-command "grep -nH"
           ;;find-program "/usr/bin/find"
           ;;grep-highlight-matches 'auto-detect
           )
    
    (if win32p
        (setq
         find-program "c:/dev/ezwinports/bin/gfind.exe"
         grep-program "c:/dev/ezwinports/bin/grep.exe"
         find-ls-option '("-exec ls -ld {} +";; "-ls"
                          .
                          "-ld" ;; "-hdlsb"
                          )
         )
      )
    
    (defun my-setup-grep-mode ()
      (turn-on-follow-mode)
      ;; (setq font-lock-defaults '(grep-mode-font-lock-keywords t))
      )
    (add-hook 'grep-setup-hook 'my-setup-grep-mode)
    
    (progn
      (global-set-key (kbd "C-c g r") 'rgrep)       ; Search Recursively
      (global-set-key (kbd "C-c g l") 'lgrep)       ; Search Locally
      (if (commandp 'ack)
          (global-set-key (kbd "C-c g a") 'ack))
      )
    
  #+END_SRC
** isearch
   #+BEGIN_SRC emacs-lisp
     ;;
     ;; isearch improvement..
     ;;
     
     ;; hint from https://github.com/purcell/emacs.d/blob/master/init-isearch.el
     
     ;; Activate occur easily inside isearch
     (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
     
     ;; ;; Search back/forth for the symbol at point
     ;; ;; See http://www.emacswiki.org/emacs/SearchAtPoint
     ;; (defun my-isearch-yank-symbol ()
     ;;   "*Put symbol at current point into search string."
     ;;   (interactive)
     ;;   (let ((sym (symbol-at-point)))
     ;;     (if sym
     ;;         (progn
     ;;           (setq isearch-regexp t
     ;;                 isearch-string (concat "\\_<" (regexp-quote (symbol-name sym)) "\\_>")
     ;;                 isearch-message (mapconcat 'isearch-text-char-description isearch-string "")
     ;;                 isearch-yank-flag t))
     ;;       (ding)))
     ;;   (isearch-search-and-update))
     ;; (define-key isearch-mode-map "\C-w" 'my-isearch-yank-symbol)
     ;; (define-key isearch-mode-map "\C-x" 'isearch-yank-word-or-char) ;; old C-w command is now C-x
     
     ;; i do isearch by sexp more than by word
     (defun my-isearch-yank-sexp ()
       "*Pull next expression from buffer into search string."
       (interactive)
       (isearch-yank-internal
        (lambda ()
          (forward-sexp 1)
          (point)
          )))
     (define-key isearch-mode-map "\C-w" 'my-isearch-yank-sexp)
     (define-key isearch-mode-map "\C-x" 'isearch-yank-word-or-char)
     
     
     ;; http://www.emacswiki.org/emacs/ZapToISearch
     (defun my-zap-to-isearch (rbeg rend)
       "Kill the region between the mark and the closest portion of
     the isearch match string. The behaviour is meant to be analogous
     to zap-to-char; let's call it zap-to-isearch. The deleted region
     does not include the isearch word. This is meant to be bound only
     in isearch mode. The point of this function is that oftentimes
     you want to delete some portion of text, one end of which happens
     to be an active isearch word. The observation to make is that if
     you use isearch a lot to move the cursor around (as you should,
     it is much more efficient than using the arrows), it happens a
     lot that you could just delete the active region between the mark
     and the point, not include the isearch word."
       (interactive "r")
       (when (not mark-active)
         (error "Mark is not active"))
       (message "isearch-other-end : %S" isearch-other-end)
       (let* ((isearch-bounds (list isearch-other-end (point)))
              (ismin (apply 'min isearch-bounds))
              (ismax (apply 'max isearch-bounds))
              )
         (if (< (mark) ismin)
             (kill-region (mark) ismin)
           (if (> (mark) ismax)
               (kill-region ismax (mark))
             (error "Internal error in isearch kill function.")))
         (isearch-exit)
         ))
     (define-key isearch-mode-map [(meta z)] 'my-zap-to-isearch)
     
     ;; http://www.emacswiki.org/emacs/ZapToISearch
     (defun my-isearch-exit-other-end (rbeg rend)
       "Exit isearch, but at the other end of the search string.
     This is useful when followed by an immediate kill."
       (interactive "r")
       (isearch-exit)
       (goto-char isearch-other-end))
     (define-key isearch-mode-map [(control return)] 'my-isearch-exit-other-end)
     
     ;; lgrep while isearch among the files having same file extension as
     ;; visited buffer file name(press C-S-o while isearch!)
     (defun my-lgrep-while-isearch ()
       (interactive)
       (let ((shk-search-string isearch-string))
         (grep-compute-defaults)
         (lgrep (if isearch-regexp shk-search-string (regexp-quote shk-search-string))
                (format "*.%s" (file-name-extension (buffer-file-name)))
                default-directory)
         (isearch-abort)))
     (define-key isearch-mode-map [(control shift o)]  'my-lgrep-while-isearch)
     
   #+END_SRC
** ido
   #+BEGIN_SRC emacs-lisp
     (require 'filecache)
     (require 'ido)
     
     (setq
      ido-enable-flex-matching t
      ido-everywhere t
      ido-auto-merge-delay-time 1.2 ;; little more time for me to input new file path
      )
     (ido-mode 1)
     
     (when (my-try-require 'ido-ubiquitous)
       (ido-ubiquitous-mode 1))
     
     (defun my-ido-find-file-in-tag-files ()
       (interactive)
       (save-excursion
         (let ((enable-recursive-minibuffers t))
           (visit-tags-table-buffer))
         (find-file
          (expand-file-name
           (ido-completing-read
            "Project file: " (tags-table-files) nil t)))))
     
     (progn
       (require 'smex)
       (smex-initialize)
       (global-set-key (kbd "M-x") 'smex)
       (global-set-key (kbd "M-X") 'smex-major-mode-commands)
       ;; This is your old M-x.
       (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command))
   #+END_SRC
* Org
  #+BEGIN_SRC emacs-lisp
    (require 'org)
    (require 'org-compat)
    (require 'org-publish)
    (require 'org-html)
    (require 'org-drill)
    (require 'iimage)
    ;;(require 'gcal)
    ;;(require 'org-install)
    
    (defvar my-org-current-project-name nil)
    (defun my-org-publish ()
      (interactive)
      (org-publish my-org-current-project-name))
    
    (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
    (modify-coding-system-alist 'file "\\.org\\'" 'utf-8)
    
    ;; cafe24 etc webhosting doesn't support xml htxml :(
    ;; (setq org-export-html-xml-declaration
    ;;    '(("html" . "<?xml version=\"1.0\" encoding=\"%s\"?>")
    ;;      ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>")))
    (my-modify-alist-with-alist
     'org-export-html-xml-declaration
     '(("html" . "")))
    
    ;; active org-babel languages
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (dot . t)
       (c++ . nil)
       (gnuplot . t)
       (plantuml . t)))
    
    ;; customizing org
    (setq
     org-startup-folded t
     org-speed-command t
     ;; #+begin_src ... #+end_src  font-lock
     org-src-fontify-natively t
     org-directory "~/DropBox/org"
     org-agenda-files '("todo.org")
     ;; 충돌이 나는 키바인딩을 최대한 피하자.
     org-replace-disputed-keys t 
     ;; org-agenda-ndays 7
     ;; org-deadline-warning-days 14
     ;; org-agenda-show-all-dates t
     ;; org-agenda-skip-deadline-if-done t
     ;; org-agenda-skip-scheduled-if-done t
     ;; org-agenda-start-on-weekday nil
     ;; org-reverse-note-order t
     ;; org-remember-store-without-prompt t
     ;; org-fast-tag-selection-single-key (quote expert))
     org-confirm-babel-evaluate nil
     org-plantuml-jar-path (cond
                            (win32p "c:/dev/plantuml/plantuml.jar")
                            (t "~/scripts/plantuml.jar"))
     org-latex-classes
     '(("article" "\\documentclass[a4papaer,11pt]{oblivoir}"
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
       ("report" "\\documentclass[11pt]{report}"
        ("\\part{%s}" . "\\part*{%s}")
        ("\\chapter{%s}" . "\\chapter*{%s}")
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
       ("book" "\\documentclass[11pt]{book}"
        ("\\part{%s}" . "\\part*{%s}")
        ("\\chapter{%s}" . "\\chapter*{%s}")
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
     )
    
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
    
    (if win32p
        ;; in win32p (user-full-name) cannot give us anything.
        (progn
          (defun my-user-full-name (&optional UID)
            ;; my-name
            "Joonhwan Lee"
            )
          (fset 'user-full-name 'my-user-full-name)))
    (setq
     org-export-htmlize-output-type 'inline-css
     org-export-html-style ""
     org-export-html-preamble 'auto
     ;; org-export-html-style (concat "<link"
     ;;                                "rel=\"stylesheet\" "
     ;;                                "type=\"text/css\" "
     ;;                                "href=\"org-styles.css\""
     ;;                                ">")
     )
    
    (setq org-publish-project-alist
          '(
            ("inherit-org-info-js"
             :base-directory "~/DropBox/orgwiki/code"
             :recursive t
             :base-extension "js"
             :publishing-directory "~/wiki/web"
             :publishing-function org-publish-attachment)
            ("orgwiki-note"
             :author "Joonhwan Lee"
             :auto-preamble t
             :auto-sitemap t
             :base-directory "~/DropBox/orgwiki/"
             :base-extension "org"
             :headline-levels 4
             :publishing-directory "~/wiki/web"
             :publishing-function org-publish-org-to-html
             :recursive t
             :section-numbers nil
             :sitemap-filename "index.org"
             :sitemap-title "sitemap"
             :table-of-contents t
             )
            ("orgwiki-static"
             :base-directory "~/DropBox/orgwiki"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
             :publishing-directory "~/wiki/web"
             :recursive t
             :publishing-function org-publish-attachment
             )
            ("orgwiki" :components ("inherit-org-info-js" "orgwiki-note" "orgwiki-static"))
            ))
    
    (add-to-list 'safe-local-variable-values '(my-org-current-project-name . "orgwiki"))
    
    ;; if i think it is safe block to be evaluated(i.e plantuml code)
    ;; then, just do not ask me about confirmation.
    (defun my-org-babel-confirm-evaluate-func (lang block)
      (cond
       ((string-equal lang "plantuml")
        nil)
       (t
        t)
       ))
    (setq org-confirm-babel-evaluate 'my-org-babel-confirm-evaluate-func)
    
    (defun my-org-mode-hook ()
      (iimage-mode t)
      (auto-fill-mode t)
      )
    
    (add-hook 'org-mode-hook 'my-org-mode-hook)
    
    ;; ;; Set to the location of your Org files on your local system
    ;; (setq org-directory "~/org")
    ;; ;; Set to the name of the file where new notes will be stored
    ;; (setq org-mobile-inbox-for-pull "~/org/flagged.org")
    ;; ;; Set to <your Dropbox root directory>/MobileOrg.
    ;; (setq org-mobile-directory "~/Dropbox/MobileOrg")
    
    ;;
    ;; org-capture configuration
    ;;
    (setq
     ;; filename for notes fallback case out of 'org-capture-template'
     org-default-notes-file "notes.org"
     ;; 
     org-capture-templates 
     '(("j" ;; key
        "Journal" ;; description
        entry ;; type
        (file+datetree "journal.org") ;; target
        "* %?\nEntered on %U\n  %i\n  %a" ;; template
        )
       ("c" ;; key
        "CodeNote" ;; description
        entry ;; type
        (file+headline "note.org" "Code") ;; target
        "** %?\nEntered on %U\n  %i\n  %a" ;; template
        )
       ("l" ;; key
        "Lifehack" ;; description
        entry ;; type
        (file+headline "note.org" "Life") ;; target
        "** %?\nEntered on %U\n  %i\n  %a" ;; template
        )
       )
     )
    
    (defvar my-org-image-irfanview-path
      "c:/Program Files/IrfanView/i_view32.exe"
      "irfanview is being used to handling image in org mode"
      )
    
    (defvar my-org-image-pngpage-path
      "pngpaste"
      "pngpaste is a tool for saving a image file from mac osx pastebin")
    
    (defvar my-org-image-subdirectory-name
      "img"
      "subdirectory name where image file will be created"
      )
    
    (defun my-org-paste-image-from-clipboard ()
      "paste image from clipboard if there is any into org buffer"
      (interactive)
      (let* ((buffer-file-directory
              (file-name-directory (buffer-file-name)))
             (image-directory (concat
                               buffer-file-directory
                               my-org-image-subdirectory-name))
             (image-path-body (concat
                               image-directory
                               "/"
                               (file-name-sans-extension
                                (file-name-nondirectory (buffer-file-name)))))
             (image-path (convert-standard-filename (concat
                                                     image-path-body
                                                     "_"
                                                     (format-time-string "%Y%m%d_%H%M%S_")
                                                     ".png")))
             (image-rel-path (file-relative-name image-path buffer-file-directory))
             (image-file-created nil)
             )
        (unless (file-exists-p image-directory)
          (make-directory image-directory))
        (setq image-file-created
              (cond
               ;; Windows: Irfanview
               (win32p
                (call-process my-org-image-irfanview-path nil nil nil (concat 
                                                                       "/clippaste /convert=" image-path)))
               (macp
                (call-process my-org-image-pngpage-path nil nil nil image-path))
               (t
                ;; Linux: ImageMagick
                (call-process "import" nil nil nil image-path))))
        (when image-file-created
          (insert (concat "[[file:" image-rel-path "]]"))
          (org-display-inline-images)))
      )
    
    (define-key org-mode-map "\C-col" 'org-store-link)
    (define-key org-mode-map "\C-coa" 'org-agenda)
    (define-key org-mode-map "\C-cob" 'org-iswitchb)
    (define-key org-mode-map "\C-cop" 'my-org-publish)
    (define-key org-mode-map (kbd "C-c o i") 'my-org-paste-image-from-clipboard)
    (when (my-try-require 'helm)
      (define-key org-mode-map (kbd "C-c a o") 'helm-info-org)
      (define-key org-mode-map (kbd "C-c a k") 'helm-org-keywords)
      )
    (define-key global-map (kbd "C-c c") 'org-capture)
  #+END_SRC   
* Helm

  my-helm.el

  #+BEGIN_SRC emacs-lisp
    (helm-mode 1)
    
    (cond
     (macp
      ;; 문제가 있다.
      (setq helm-c-top-command "-ncols %s -F -R -u")
      ;; hint from
      ;; https://github.com/emacs-helm/helm/commit/e6d0634c41eeeb2219d15baf0dfd4758ef16b221
      (add-to-list 'helm-completing-read-handlers-alist '(tmm-menubar . nil) t)
      )
     (win32p
      (setq helm-grep-default-command "perl.exe c:/dev/utility/ack.pl -Hn --no-group --no-color %e %p %f"
            helm-grep-default-recurse-command "perl.exe c:/dev/utility/ack.pl -H --no-group --no-color %e %p %f")
      ;; override original
      (defun* helm-grep-use-ack-p (&key where)
        (case where
          (default (string= (helm-grep-command) "perl.exe"))
          (recursive (string= (helm-grep-command t) "perl.exe"))
          (strict (and (string= (helm-grep-command t) "perl.exe")
                       (string= (helm-grep-command) "perl.exe")))
          (t (and (not (string= (helm-grep-command) "git-grep"))
                  (or (string= (helm-grep-command) "perl.exe")
                      (string= (helm-grep-command t) "perl.exe"))))))
      )
     )
    
    (setq helm-c-locate-command 
          (case system-type
            ('gnu/linux "locate -i -r %s")
            ('berkeley-unix "locate -i %s")
            ('windows-nt "es %s")
            ('darwin "mdfind -name %s %s")
            (t "locate %s"))
          )
    
    (setq
     helm-c-grep-default-command "perl.exe -Hn --no-group --no-color %e %p %f"
     helm-c-grep-default-recurse-command "perl.exe -H --no-group --no-color %e %p %f"
     )
    
    ;; Source for completing Emacs variables.
    (setq helm-c-source-emacs-variables
      '((name . "Emacs Variables")
        (candidates . (lambda ()
                        (sort (all-completions "" obarray 'boundp) 'string-lessp)))
        (type . variable)
        (requires-pattern . 2)))
    
    ;; 원본의 helm-for-files-preferred-list 설정
    (setq helm-for-files-preferred-list 
          '(
            ;; helm-c-source-ffap-guesser ;; 이거 있으면 좋을 텐데 동작이 원하는대로 안됨
            ;; helm-c-source-ffap-line ;; 이거또 없앴네... 헐
            helm-c-source-recentf
            helm-c-source-files-in-current-dir
            helm-c-source-files-in-all-dired
            ;; helm-c-source-buffers-list
            helm-c-source-bookmarks
            helm-c-source-file-cache
            helm-c-source-locate
            ))
    
    ;; Source for completing Emacs functions.
    (setq helm-c-source-emacs-functions
      '((name . "Emacs Functions")
        (candidates . (lambda ()
                        (let (commands)
                          (mapatoms (lambda (a)
                                      (if (functionp a)
                                          (push (symbol-name a) commands))))
                          (sort commands 'string-lessp))))
        (type . variable)
        (requires-pattern . 2)))
    
    (defun eproject-file-list ()
      (let ((files '()))
        (mapcar 
         (lambda (elem)
           (add-to-list 'files (concat prj-directory (car elem)) t))
         prj-files)
        files)
      )
    
    
    ;; 이거 아직 좀 느리다.
    ;; (when (and (featurep 'projectile)
    ;;         (my-try-require 'helm-projectile))
    ;;   ;; helm-projectile 이 있으면, 
    ;;   (add-to-list 'helm-for-files-preferred-list 'helm-c-source-projectile-files-list t)
    ;;   )
    
    (when (featurep 'eproject)
      (setq helm-c-source-eproject-files
            `((name . "eproject files")
              (init . (lambda () (require 'eproject)))
              (candidates . (lambda () (eproject-file-list)))
              (kpeymap . ,helm-generic-files-map)
              (help-message . helm-generic-file-help-message)
              (mode-line . helm-generic-file-mode-line-string)
              (candidate-number-limit . 20)
              ;; (candidate-transformer helm-c-highlight-files)
              (type . file)
              (requires-pattern . 0)
              ))
      ;; `((name . "eproject files")
      ;;    (candidates . (lambda ()
      ;;                    (with-helm-current-buffer
      ;;                      (directory-files (helm-c-current-directory) t))))
      ;;    (keymap . ,helm-generic-files-map)
      ;;    (help-message . helm-generic-file-help-message)
      ;;    (mode-line . helm-generic-file-mode-line-string)
      ;;    (candidate-transformer helm-c-highlight-files)
      ;;    (type . file)))
    
      (defun my-helm-c-source-eproject-files ()
        (interactive)
        (helm-other-buffer '(helm-c-source-eproject-files) "*helm for eproject*"))
    
      (defun my-helm-c-ctags ()
        (interactive)
        (helm-other-buffer '(helm-c-source-ctags) "*helm for ctags*"))
    
      (add-to-list 'helm-for-files-preferred-list 'helm-c-source-eproject-files t)
      )
    
    (when (featurep 'projectile)
      (require 'helm-projectile))
    
    ;; variable first and function last
    (defun my-helm-c-help-variable-or-function ()
      "Preconfigured helm to describe commands, functions, variables and faces."
      (interactive)
      (let ((default (thing-at-point 'symbol)))
        (helm :sources
              (mapcar (lambda (func)
                        (funcall func default))
                      '(helm-c-source-emacs-variables
                        helm-c-source-emacs-commands
                        helm-c-source-emacs-functions
                        ))
              :buffer "*helm help elisp*"
              :preselect default)))
    ;; function first and variable last
    (defun my-helm-c-help-function-or-variable ()
      "Preconfigured helm to describe commands, functions, variables and faces."
      (interactive)
      (let ((default (thing-at-point 'symbol)))
        (helm :sources
              (mapcar (lambda (func)
                        (funcall func default))
                      '(helm-c-source-emacs-commands
                        helm-c-source-emacs-functions
                        helm-c-source-emacs-variables
                        ))
              :buffer "*helm help elisp*"
              :preselect default)))
    
    ;; replace original occur with helm-occur
    ;; - display initial pattern using thing-at-pt
    ;; - initial pattern should be marked region
    (defun my-helm-occur ()
      (interactive)
      (let ((helm-compile-source-functions
             ;; rule out helm-match-plugin because the input is one regexp.
             (delq 'helm-compile-source--match-plugin
                   (copy-sequence helm-compile-source-functions)))
            (initial-hint (thing-at-point 'symbol))
            )
        (helm :sources 'helm-source-occur
              :input initial-hint
              :buffer "*helm occur+*"
              :history 'helm-grep-history
              :preselect initial-hint
              )
        ))
    
    (progn
      (define-key helm-command-map (kbd "<RET>") 'helm-mini)
      ;; (define-key helm-command-map (kbd "C-l") 'helm-filelist)
      (define-key helm-command-map (kbd "h v") 'my-helm-c-help-variable-or-function)
      (define-key helm-command-map (kbd "h f") 'my-helm-c-help-function-or-variable)
      (define-key helm-command-map (kbd "o h") 'helm-org-headlines)
      (define-key helm-command-map (kbd "o k") 'helm-org-keywords)
      (when (featurep 'eproject)
        (define-key helm-command-map (kbd "j") 'my-helm-c-source-eproject-files)
        )
      (when (featurep 'projectile)
        (define-key helm-command-map (kbd "j") 'helm-projectile))
      (define-key helm-command-map (kbd "M-s o") 'my-helm-occur)
      (global-set-key (kbd "C-c a") helm-command-map)
      )
    
  #+END_SRC
* PostInit
** Diminish
   #+BEGIN_SRC emacs-lisp
     ;; make cleaner modeline even with multiple minor modes
     ;; hint from http://whattheemacsd.com/init.el-04.html
     (when (my-try-require 'diminish)
       ;; (diminish 'wrap-region-mode)
       (diminish 'yas-minor-mode)
       (diminish 'projectile-mode)
       (diminish 'undo-tree-mode)
       (diminish 'abbrev-mode)
       (diminish 'helm-mode)
       (diminish 'auto-complete-mode)
       (diminish 'eldoc-mode)
       )
   #+END_SRC

** Load Customization File

   #+BEGIN_SRC emacs-lisp
   (load custom-file)
   #+END_SRC

** Fix Rescaling of Korean Fonts

   위쪽 theme 쪽에 설치된 것임.

   #+BEGIN_SRC emacs-lisp
   (my-setup-font-for-mbcs)
   #+END_SRC
